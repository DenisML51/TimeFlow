Index: src/pages/ForecastPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/pages/ForecastPage.jsx\r\nimport React, {\r\n  useState,\r\n  useContext,\r\n  useEffect,\r\n  useCallback,\r\n  useMemo,\r\n  memo,\r\n} from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  Slider,\r\n  TextField,\r\n  CircularProgress,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Tabs,\r\n  Tab,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  RadioGroup,\r\n  ToggleButtonGroup,\r\n  ToggleButton,\r\n  Radio,\r\n  Slide,\r\n  Collapse,\r\n  Chip,\r\n  MenuItem\r\n} from \"@mui/material\";\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Close as CloseIcon,\r\n  Check as CheckIcon,\r\n  TrendingDown as TrendingDownIcon,\r\n  ShowChart as ShowChartIcon,\r\n  Percent as PercentIcon,\r\n} from \"@mui/icons-material\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\";\r\nimport axios from \"axios\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { saveAs } from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { DashboardContext } from \"../context/DashboardContext\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { ParticleBackground } from \"../components/home/ParticleBackground\";\r\nimport CategoricalDataBlock from \"../components/CategoricalDataBlock\";\r\n\r\n// =======================\r\n// Вспомогательные функции для графиков и метрик\r\n// =======================\r\nfunction computeMetricsOnStandardized(dataArray) {\r\n  const rowsWithFact = dataArray.filter(\r\n    (d) => d.y_fact !== null && d.y_fact !== undefined\r\n  );\r\n  if (!rowsWithFact.length) return null;\r\n  const facts = rowsWithFact.map((d) => d.y_fact);\r\n  const preds = rowsWithFact.map((d) => d.y_forecast);\r\n  const combined = [...facts, ...preds];\r\n  const mean = combined.reduce((acc, v) => acc + v, 0) / combined.length;\r\n  const variance =\r\n    combined.reduce((acc, v) => acc + (v - mean) ** 2, 0) / combined.length;\r\n  const std = Math.sqrt(variance);\r\n  if (std === 0) return { mae: 0, rmse: 0, mape: 0 };\r\n  const factsScaled = facts.map((f) => (f - mean) / std);\r\n  const predsScaled = preds.map((p) => (p - mean) / std);\r\n  let sumAbs = 0,\r\n    sumSq = 0,\r\n    sumPct = 0,\r\n    countPct = 0;\r\n  for (let i = 0; i < factsScaled.length; i++) {\r\n    const err = factsScaled[i] - predsScaled[i];\r\n    sumAbs += Math.abs(err);\r\n    sumSq += err * err;\r\n    if (factsScaled[i] !== 0) {\r\n      sumPct += Math.abs(err / factsScaled[i]);\r\n      countPct++;\r\n    }\r\n  }\r\n  const mae = sumAbs / factsScaled.length;\r\n  const rmse = Math.sqrt(sumSq / factsScaled.length);\r\n  const mape = countPct > 0 ? (sumPct / countPct) * 100 : null;\r\n  return { mae, rmse, mape };\r\n}\r\n\r\nfunction makeSingleModelChartData(dataArray, modelColor) {\r\n  return {\r\n    labels: dataArray.map((d) => d.ds),\r\n    datasets: [\r\n      {\r\n        label: \"Факт\",\r\n        data: dataArray.map((d) => d.y_fact),\r\n        borderColor: \"#14c59a\",\r\n        backgroundColor: \"#14c59a\",\r\n        borderWidth: 0.9,\r\n        pointRadius: 1,\r\n        fill: false,\r\n        order: 0,\r\n      },\r\n      {\r\n        label: \"Прогноз\",\r\n        data: dataArray.map((d) => d.y_forecast),\r\n        borderColor: modelColor,\r\n        backgroundColor: modelColor,\r\n        borderDash: [6, 6],\r\n        borderWidth: 1,\r\n        pointRadius: 2,\r\n        fill: false,\r\n        order: 1,\r\n      },\r\n      {\r\n        label: \"Нижняя\",\r\n        data: dataArray.map((d) => d.yhat_lower),\r\n        fill: \"-1\",\r\n        backgroundColor: `${modelColor}33`,\r\n        borderColor: `${modelColor}33`,\r\n        borderDash: [5, 5],\r\n        borderWidth: 1,\r\n        pointRadius: 0,\r\n        order: 1,\r\n      },\r\n      {\r\n        label: \"Верхняя\",\r\n        data: dataArray.map((d) => d.yhat_upper),\r\n        fill: \"-1\",\r\n        backgroundColor: `${modelColor}33`,\r\n        borderColor: `${modelColor}33`,\r\n        borderDash: [5, 5],\r\n        borderWidth: 1,\r\n        pointRadius: 0,\r\n        order: 1,\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\nfunction makeCombinedChartData(modelsArray, modelColorMap) {\r\n  const allDates = new Set();\r\n  modelsArray.forEach((m) => {\r\n    m.segment.forEach((row) => allDates.add(row.ds));\r\n  });\r\n  const labels = Array.from(allDates).sort((a, b) => new Date(a) - new Date(b));\r\n  const datasets = [];\r\n  modelsArray.forEach((m) => {\r\n    const color = modelColorMap[m.modelName] || \"#36A2EB\";\r\n    const mapData = new Map();\r\n    m.segment.forEach((row) => {\r\n      mapData.set(row.ds, { fact: row.y_fact, forecast: row.y_forecast });\r\n    });\r\n    datasets.push({\r\n      label: `Факт (${m.modelName})`,\r\n      data: labels.map((ds) => {\r\n        const item = mapData.get(ds);\r\n        return item ? item.fact : null;\r\n      }),\r\n      borderColor: \"#14c59a\",\r\n      backgroundColor: \"#14c59a\",\r\n      borderWidth: 0.9,\r\n      pointRadius: 1,\r\n      fill: false,\r\n      order: 0,\r\n    });\r\n    datasets.push({\r\n      label: `Прогноз (${m.modelName})`,\r\n      data: labels.map((ds) => {\r\n        const item = mapData.get(ds);\r\n        return item ? item.forecast : null;\r\n      }),\r\n      borderColor: color,\r\n      backgroundColor: \"transparent\",\r\n      borderDash: [5, 5],\r\n      borderWidth: 1,\r\n      pointRadius: 2,\r\n      fill: false,\r\n      order: 1,\r\n    });\r\n  });\r\n  return { labels, datasets };\r\n}\r\n\r\nfunction getChipBorderColor(value, type) {\r\n  if (value === null || value === undefined) return \"#666\";\r\n  if (type === \"mae\" || type === \"rmse\")\r\n    return value < 1 ? \"#4CAF50\" : value < 5 ? \"#FFC107\" : \"#F44336\";\r\n  if (type === \"mape\")\r\n    return value < 10 ? \"#4CAF50\" : value < 20 ? \"#FFC107\" : \"#F44336\";\r\n  return \"#666\";\r\n}\r\n\r\nconst AnimatedMetricChip = memo(function AnimatedMetricChip({ label, value, type, icon }) {\r\n  return (\r\n    <Chip\r\n      icon={icon}\r\n      label={`${label}: ${value !== null ? value.toFixed(4) : \"N/A\"}`}\r\n      sx={{\r\n        fontSize: \"0.9rem\",\r\n        fontWeight: \"bold\",\r\n        border: `2px solid ${getChipBorderColor(value, type)}`,\r\n        backgroundColor: \"transparent\",\r\n        color: getChipBorderColor(value, type),\r\n        transition: \"all 0.3s ease-in-out\",\r\n        \"& .MuiChip-icon\": { color: getChipBorderColor(value, type) },\r\n        \"&:hover\": {\r\n          backgroundColor: getChipBorderColor(value, type),\r\n          color: \"#121212\",\r\n          \"& .MuiChip-icon\": { color: \"#121212\" },\r\n        },\r\n      }}\r\n    />\r\n  );\r\n});\r\n\r\n// =======================\r\n// Внутренние компоненты для ввода параметров моделей\r\n// =======================\r\nconst ProphetBlock = memo(function ProphetBlock({\r\n  active,\r\n  setActive,\r\n  prophetParams,\r\n  setProphetParams,\r\n}) {\r\n  const [localSeasonalityMode, setLocalSeasonalityMode] = useState(\r\n    prophetParams.seasonality_mode || \"additive\"\r\n  );\r\n  const [paramsOpen, setParamsOpen] = useState(false);\r\n  const { setIsDirty } = useContext(DashboardContext);\r\n\r\n  const handleApply = useCallback(() => {\r\n    setProphetParams({ seasonality_mode: localSeasonalityMode });\r\n    setActive(true);\r\n    setIsDirty(true);\r\n    setParamsOpen(false);\r\n  }, [localSeasonalityMode, setProphetParams, setActive, setIsDirty]);\r\n\r\n  const handleCancel = useCallback(() => {\r\n    setActive(false);\r\n    setIsDirty(true);\r\n  }, [setActive, setIsDirty]);\r\n\r\n  const toggleParams = useCallback(() => {\r\n    // Если параметры закрыты и модель активна, деактивируем её\r\n    if (!paramsOpen && active) {\r\n      setActive(false);\r\n      setIsDirty(true);\r\n    }\r\n    setParamsOpen((prev) => !prev);\r\n  }, [paramsOpen, active, setActive, setIsDirty]);\r\n  const borderColor = active ? \"#10A37F\" : \"#FF4444\";\r\n\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        p: 2,\r\n        mb: 2,\r\n        border: `2px solid ${borderColor}`,\r\n        borderRadius: 2,\r\n        transition: \"border-color 0.2s\",\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}\r\n      >\r\n        <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\", color: \"#fff\" }}>\r\n          Prophet\r\n        </Typography>\r\n        <Button onClick={toggleParams} variant=\"text\" sx={{ color: \"#10A37F\" }}>\r\n          {paramsOpen ? \"Скрыть параметры\" : \"Показать параметры\"}\r\n        </Button>\r\n      </Box>\r\n      <Collapse in={paramsOpen}>\r\n        <Box sx={{ mt: 1 }}>\r\n          <FormControl fullWidth size=\"small\" sx={{ mb: 1 }}>\r\n            <InputLabel>Seasonality Mode</InputLabel>\r\n            <Select\r\n              value={localSeasonalityMode}\r\n              label=\"Seasonality Mode\"\r\n              onChange={(e) => setLocalSeasonalityMode(e.target.value)}\r\n              sx={{ backgroundColor: \"#2c2c2c\", color: \"#fff\" }}\r\n            >\r\n              <MenuItem value=\"additive\">Additive</MenuItem>\r\n              <MenuItem value=\"multiplicative\">Multiplicative</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n      </Collapse>\r\n      <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", gap: 1 }}>\r\n        {active ? (\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n            sx={{\r\n              borderColor: \"#FF4444\",\r\n              color: \"#FF4444\",\r\n              \"&:hover\": { borderColor: \"#FF4444\", backgroundColor: \"#ff44441a\" },\r\n            }}\r\n            onClick={handleCancel}\r\n          >\r\n            Отключить\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CheckIcon />}\r\n            sx={{\r\n              borderColor: \"#10A37F\",\r\n              color: \"#10A37F\",\r\n              \"&:hover\": { borderColor: \"#10A37F\", backgroundColor: \"#10A37F1a\" },\r\n            }}\r\n            onClick={handleApply}\r\n          >\r\n            Активировать\r\n          </Button>\r\n        )}\r\n      </Box>\r\n    </Paper>\r\n  );\r\n});\r\n\r\nconst XGBoostBlock = memo(function XGBoostBlock({\r\n  active,\r\n  setActive,\r\n  xgboostParams,\r\n  setXgboostParams,\r\n}) {\r\n  const [localMaxDepth, setLocalMaxDepth] = useState(xgboostParams.max_depth || 6);\r\n  const [localLearningRate, setLocalLearningRate] = useState(\r\n    xgboostParams.learning_rate || 0.1\r\n  );\r\n  const [localNEstimators, setLocalNEstimators] = useState(\r\n    xgboostParams.n_estimators || 100\r\n  );\r\n  const [localSubsample, setLocalSubsample] = useState(xgboostParams.subsample || 1);\r\n  const [localColsampleBytree, setLocalColsampleBytree] = useState(\r\n    xgboostParams.colsample_bytree || 1\r\n  );\r\n  const [paramsOpen, setParamsOpen] = useState(false);\r\n  const { setIsDirty } = useContext(DashboardContext);\r\n\r\n  const handleApply = useCallback(() => {\r\n    setXgboostParams({\r\n      max_depth: localMaxDepth,\r\n      learning_rate: localLearningRate,\r\n      n_estimators: localNEstimators,\r\n      subsample: localSubsample,\r\n      colsample_bytree: localColsampleBytree,\r\n    });\r\n    setActive(true);\r\n    setIsDirty(true);\r\n    setParamsOpen(false); // скрываем параметры при активации\r\n  }, [\r\n    localMaxDepth,\r\n    localLearningRate,\r\n    localNEstimators,\r\n    localSubsample,\r\n    localColsampleBytree,\r\n    setXgboostParams,\r\n    setActive,\r\n    setIsDirty,\r\n    setParamsOpen,\r\n  ]);\r\n\r\n  const handleCancel = useCallback(() => {\r\n    setActive(false);\r\n    setIsDirty(true);\r\n  }, [setActive, setIsDirty]);\r\n\r\n  const toggleParams = useCallback(() => {\r\n    if (!paramsOpen && active) {\r\n      setActive(false);\r\n      setIsDirty(true);\r\n    }\r\n    setParamsOpen((prev) => !prev);\r\n  }, [paramsOpen, active, setActive, setIsDirty]);\r\n\r\n  const borderColor = active ? \"#10A37F\" : \"#FF4444\";\r\n\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        p: 2,\r\n        mb: 2,\r\n        border: `2px solid ${borderColor}`,\r\n        borderRadius: 2,\r\n        transition: \"border-color 0.2s\",\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}\r\n      >\r\n        <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\", color: \"#fff\" }}>\r\n          XGBoost\r\n        </Typography>\r\n        <Button onClick={toggleParams} variant=\"text\" sx={{ color: \"#10A37F\" }}>\r\n          {paramsOpen ? \"Скрыть параметры\" : \"Показать параметры\"}\r\n        </Button>\r\n      </Box>\r\n      <Collapse in={paramsOpen}>\r\n        <Box sx={{ mt: 1 }}>\r\n          <Typography variant=\"body2\" sx={{ color: \"#fff\" }} gutterBottom>\r\n            Max Depth: {localMaxDepth}\r\n          </Typography>\r\n          <Slider\r\n            value={localMaxDepth}\r\n            onChange={(e, val) => setLocalMaxDepth(val)}\r\n            min={1}\r\n            max={15}\r\n            step={1}\r\n            valueLabelDisplay=\"auto\"\r\n            sx={{ color: \"#10A37F\", mb: 2 }}\r\n          />\r\n          <Typography variant=\"body2\" sx={{ color: \"#fff\" }} gutterBottom>\r\n            Learning Rate: {localLearningRate}\r\n          </Typography>\r\n          <Slider\r\n            value={localLearningRate}\r\n            onChange={(e, val) => setLocalLearningRate(val)}\r\n            min={0.01}\r\n            max={1}\r\n            step={0.01}\r\n            valueLabelDisplay=\"auto\"\r\n            sx={{ color: \"#10A37F\", mb: 2 }}\r\n          />\r\n          <Typography variant=\"body2\" sx={{ color: \"#fff\" }} gutterBottom>\r\n            n_estimators: {localNEstimators}\r\n          </Typography>\r\n          <Slider\r\n            value={localNEstimators}\r\n            onChange={(e, val) => setLocalNEstimators(val)}\r\n            min={10}\r\n            max={500}\r\n            step={10}\r\n            valueLabelDisplay=\"auto\"\r\n            sx={{ color: \"#10A37F\", mb: 2 }}\r\n          />\r\n          <Typography variant=\"body2\" sx={{ color: \"#fff\" }} gutterBottom>\r\n            Subsample: {localSubsample}\r\n          </Typography>\r\n          <Slider\r\n            value={localSubsample}\r\n            onChange={(e, val) => setLocalSubsample(val)}\r\n            min={0.5}\r\n            max={1}\r\n            step={0.1}\r\n            valueLabelDisplay=\"auto\"\r\n            sx={{ color: \"#10A37F\", mb: 2 }}\r\n          />\r\n          <Typography variant=\"body2\" sx={{ color: \"#fff\" }} gutterBottom>\r\n            Colsample by tree: {localColsampleBytree}\r\n          </Typography>\r\n          <Slider\r\n            value={localColsampleBytree}\r\n            onChange={(e, val) => setLocalColsampleBytree(val)}\r\n            min={0.5}\r\n            max={1}\r\n            step={0.1}\r\n            valueLabelDisplay=\"auto\"\r\n            sx={{ color: \"#10A37F\", mb: 2 }}\r\n          />\r\n        </Box>\r\n      </Collapse>\r\n      <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", gap: 1, mt: 1 }}>\r\n        {active ? (\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n            onClick={handleCancel}\r\n            sx={{\r\n              borderColor: \"#FF4444\",\r\n              color: \"#FF4444\",\r\n              \"&:hover\": { borderColor: \"#FF4444\", backgroundColor: \"#ff44441a\" },\r\n            }}\r\n          >\r\n            Отключить\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CheckIcon />}\r\n            onClick={handleApply}\r\n            sx={{\r\n              borderColor: \"#10A37F\",\r\n              color: \"#10A37F\",\r\n              \"&:hover\": { borderColor: \"#10A37F\", backgroundColor: \"#10A37F1a\" },\r\n            }}\r\n          >\r\n            Активировать\r\n          </Button>\r\n        )}\r\n      </Box>\r\n    </Paper>\r\n  );\r\n});\r\n\r\nconst SarimaBlock = memo(function SarimaBlock({\r\n  active,\r\n  setActive,\r\n  sarimaParams,\r\n  setSarimaParams,\r\n}) {\r\n  const [localP, setLocalP] = useState(sarimaParams.p || 1);\r\n  const [localD, setLocalD] = useState(sarimaParams.d || 1);\r\n  const [localQ, setLocalQ] = useState(sarimaParams.q || 1);\r\n  const [localPSeasonal, setLocalPSeasonal] = useState(sarimaParams.P || 1);\r\n  const [localDSeasonal, setLocalDSeasonal] = useState(sarimaParams.D || 1);\r\n  const [localQSeasonal, setLocalQSeasonal] = useState(sarimaParams.Q || 1);\r\n  const [localS, setLocalS] = useState(sarimaParams.s || 12);\r\n  const [paramsOpen, setParamsOpen] = useState(false);\r\n  const { setIsDirty } = useContext(DashboardContext);\r\n\r\n  const handleApply = useCallback(() => {\r\n    setSarimaParams({\r\n      p: localP,\r\n      d: localD,\r\n      q: localQ,\r\n      P: localPSeasonal,\r\n      D: localDSeasonal,\r\n      Q: localQSeasonal,\r\n      s: localS,\r\n    });\r\n    setActive(true);\r\n    setIsDirty(true);\r\n    setParamsOpen(false); // скрываем параметры при активации\r\n  }, [\r\n    localP,\r\n    localD,\r\n    localQ,\r\n    localPSeasonal,\r\n    localDSeasonal,\r\n    localQSeasonal,\r\n    localS,\r\n    setSarimaParams,\r\n    setActive,\r\n    setIsDirty,\r\n  ]);\r\n\r\n  const handleCancel = useCallback(() => {\r\n    setActive(false);\r\n    setIsDirty(true);\r\n  }, [setActive, setIsDirty]);\r\n\r\n  const toggleParams = useCallback(() => {\r\n    if (!paramsOpen && active) {\r\n      setActive(false);\r\n      setIsDirty(true);\r\n    }\r\n    setParamsOpen((prev) => !prev);\r\n  }, [paramsOpen, active, setActive, setIsDirty]);\r\n\r\n  const borderColor = active ? \"#10A37F\" : \"#FF4444\";\r\n\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        p: 2,\r\n        mb: 2,\r\n        border: `2px solid ${borderColor}`,\r\n        borderRadius: 2,\r\n        transition: \"border-color 0.2s\",\r\n      }}\r\n    >\r\n      <Box sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n        <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\", color: \"#fff\" }}>\r\n          SARIMA\r\n        </Typography>\r\n        <Box>\r\n          <Button onClick={toggleParams} variant=\"text\" size=\"small\" sx={{ color: \"#10A37F\" }}>\r\n            {paramsOpen ? \"Скрыть параметры\" : \"Показать параметры\"}\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n      <Collapse in={paramsOpen}>\r\n        <Box sx={{ mt: 1, display: \"flex\", flexWrap: \"wrap\", gap: 2 }}>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\", mb: 0.5 }}>p</Typography>\r\n            <ToggleButtonGroup\r\n              value={localP}\r\n              exclusive\r\n              onChange={(e, newVal) => newVal !== null && setLocalP(newVal)}\r\n              size=\"small\"\r\n              color=\"primary\"\r\n            >\r\n              {[0, 1, 2, 3, 4, 5].map((val) => (\r\n                <ToggleButton key={val} value={val} sx={{ color: \"#fff\", borderColor: \"#10A37F\" }}>\r\n                  {val}\r\n                </ToggleButton>\r\n              ))}\r\n            </ToggleButtonGroup>\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\", mb: 0.5 }}>d</Typography>\r\n            <ToggleButtonGroup\r\n              value={localD}\r\n              exclusive\r\n              onChange={(e, newVal) => newVal !== null && setLocalD(newVal)}\r\n              size=\"small\"\r\n              color=\"primary\"\r\n            >\r\n              {[0, 1, 2, 3, 4, 5].map((val) => (\r\n                <ToggleButton key={val} value={val} sx={{ color: \"#fff\", borderColor: \"#10A37F\" }}>\r\n                  {val}\r\n                </ToggleButton>\r\n              ))}\r\n            </ToggleButtonGroup>\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\", mb: 0.5 }}>q</Typography>\r\n            <ToggleButtonGroup\r\n              value={localQ}\r\n              exclusive\r\n              onChange={(e, newVal) => newVal !== null && setLocalQ(newVal)}\r\n              size=\"small\"\r\n              color=\"primary\"\r\n            >\r\n              {[0, 1, 2, 3, 4, 5].map((val) => (\r\n                <ToggleButton key={val} value={val} sx={{ color: \"#fff\", borderColor: \"#10A37F\" }}>\r\n                  {val}\r\n                </ToggleButton>\r\n              ))}\r\n            </ToggleButtonGroup>\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\", mb: 0.5 }}>P</Typography>\r\n            <ToggleButtonGroup\r\n              value={localPSeasonal}\r\n              exclusive\r\n              onChange={(e, newVal) => newVal !== null && setLocalPSeasonal(newVal)}\r\n              size=\"small\"\r\n              color=\"primary\"\r\n            >\r\n              {[0, 1, 2, 3, 4, 5].map((val) => (\r\n                <ToggleButton key={val} value={val} sx={{ color: \"#fff\", borderColor: \"#10A37F\" }}>\r\n                  {val}\r\n                </ToggleButton>\r\n              ))}\r\n            </ToggleButtonGroup>\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\", mb: 0.5 }}>D</Typography>\r\n            <ToggleButtonGroup\r\n              value={localDSeasonal}\r\n              exclusive\r\n              onChange={(e, newVal) => newVal !== null && setLocalDSeasonal(newVal)}\r\n              size=\"small\"\r\n              color=\"primary\"\r\n            >\r\n              {[0, 1, 2, 3, 4, 5].map((val) => (\r\n                <ToggleButton key={val} value={val} sx={{ color: \"#fff\", borderColor: \"#10A37F\" }}>\r\n                  {val}\r\n                </ToggleButton>\r\n              ))}\r\n            </ToggleButtonGroup>\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\", mb: 0.5 }}>Q</Typography>\r\n            <ToggleButtonGroup\r\n              value={localQSeasonal}\r\n              exclusive\r\n              onChange={(e, newVal) => newVal !== null && setLocalQSeasonal(newVal)}\r\n              size=\"small\"\r\n              color=\"primary\"\r\n            >\r\n              {[0, 1, 2, 3, 4, 5].map((val) => (\r\n                <ToggleButton key={val} value={val} sx={{ color: \"#fff\", borderColor: \"#10A37F\" }}>\r\n                  {val}\r\n                </ToggleButton>\r\n              ))}\r\n            </ToggleButtonGroup>\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\", mb: 0.5 }}>\r\n              Seasonal Period (s)\r\n            </Typography>\r\n            <ToggleButtonGroup\r\n              value={localS}\r\n              exclusive\r\n              onChange={(e, newVal) => newVal !== null && setLocalS(newVal)}\r\n              size=\"small\"\r\n              color=\"primary\"\r\n            >\r\n              {[1, 2, 3, 4, 6, 12, 24].map((val) => (\r\n                <ToggleButton key={val} value={val} sx={{ color: \"#fff\", borderColor: \"#10A37F\" }}>\r\n                  {val}\r\n                </ToggleButton>\r\n              ))}\r\n            </ToggleButtonGroup>\r\n          </Box>\r\n        </Box>\r\n      </Collapse>\r\n      <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", gap: 1, mt: 1 }}>\r\n        {active ? (\r\n          <Button\r\n            startIcon={<CloseIcon />}\r\n            variant=\"outlined\"\r\n            onClick={handleCancel}\r\n            sx={{\r\n              mr: 1,\r\n              borderColor: \"#FF4444\",\r\n              color: \"#FF4444\",\r\n              \"&:hover\": { borderColor: \"#FF4444\", backgroundColor: \"#ff44441a\" },\r\n            }}\r\n          >\r\n            Отключить\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CheckIcon />}\r\n            onClick={handleApply}\r\n            sx={{\r\n              mr: 1,\r\n              borderColor: \"#10A37F\",\r\n              color: \"#10A37F\",\r\n              \"&:hover\": { borderColor: \"#10A37F\", backgroundColor: \"#10A37F1a\" },\r\n            }}\r\n          >\r\n            Активировать\r\n          </Button>\r\n        )}\r\n      </Box>\r\n    </Paper>\r\n  );\r\n});\r\n\r\nconst LSTMBlock = memo(function LSTMBlock({\r\n  active,\r\n  setActive,\r\n  lstmParams,\r\n  setLstmParams\r\n}) {\r\n  const defaultParams = {\r\n    seq_length: 12,\r\n    lag_periods: 6,\r\n    window_sizes: \"3,6,12\",\r\n    num_layers: 2,\r\n    hidden_dim: 128,\r\n    dropout: 0.3,\r\n    batch_size: 64,\r\n    epochs: 200,\r\n    learning_rate: 0.001,\r\n    patience: 15,\r\n    delta: 0.001,\r\n    n_splits: 5,\r\n    use_attention: true,\r\n    mc_dropout: true,\r\n    mc_samples: 100,\r\n    optimizer_type: \"AdamW\",\r\n    criterion: \"Huber\",\r\n  };\r\n  const init = lstmParams || defaultParams;\r\n  const [localSeqLength, setLocalSeqLength] = useState(init.seq_length);\r\n  const [localLagPeriods, setLocalLagPeriods] = useState(init.lag_periods);\r\n  const [localWindowSizes, setLocalWindowSizes] = useState(init.window_sizes);\r\n  const [localNumLayers, setLocalNumLayers] = useState(init.num_layers);\r\n  const [localHiddenDim, setLocalHiddenDim] = useState(init.hidden_dim);\r\n  const [localDropout, setLocalDropout] = useState(init.dropout);\r\n  const [localBatchSize, setLocalBatchSize] = useState(init.batch_size);\r\n  const [localEpochs, setLocalEpochs] = useState(init.epochs);\r\n  const [localLearningRate, setLocalLearningRate] = useState(init.learning_rate);\r\n  const [localPatience, setLocalPatience] = useState(init.patience);\r\n  const [localDelta, setLocalDelta] = useState(init.delta);\r\n  const [localNSplits, setLocalNSplits] = useState(init.n_splits);\r\n  const [localUseAttention, setLocalUseAttention] = useState(init.use_attention);\r\n  const [localMCDropout, setLocalMCDropout] = useState(init.mc_dropout);\r\n  const [localMCSamples, setLocalMCSamples] = useState(init.mc_samples);\r\n  const [localOptimizer, setLocalOptimizer] = useState(init.optimizer_type || \"AdamW\");\r\n  const [localCriterion, setLocalCriterion] = useState(init.criterion || \"Huber\");\r\n  const [paramsOpen, setParamsOpen] = useState(false);\r\n  const { setIsDirty } = useContext(DashboardContext);\r\n\r\n  const handleApply = useCallback(() => {\r\n    setLstmParams({\r\n      seq_length: localSeqLength,\r\n      lag_periods: localLagPeriods,\r\n      window_sizes: localWindowSizes.split(',').map(val => parseInt(val.trim())).filter(val => !isNaN(val)),\r\n      num_layers: localNumLayers,\r\n      hidden_dim: localHiddenDim,\r\n      dropout: localDropout,\r\n      batch_size: localBatchSize,\r\n      epochs: localEpochs,\r\n      learning_rate: localLearningRate,\r\n      patience: localPatience,\r\n      delta: localDelta,\r\n      n_splits: localNSplits,\r\n      use_attention: localUseAttention,\r\n      mc_dropout: localMCDropout,\r\n      mc_samples: localMCSamples,\r\n      optimizer_type: localOptimizer,\r\n      criterion: localCriterion,\r\n    });\r\n    setActive(true);\r\n    setIsDirty(true);\r\n    setParamsOpen(false); // скрываем параметры при активации\r\n  }, [\r\n    localSeqLength,\r\n    localLagPeriods,\r\n    localWindowSizes,\r\n    localNumLayers,\r\n    localHiddenDim,\r\n    localDropout,\r\n    localBatchSize,\r\n    localEpochs,\r\n    localLearningRate,\r\n    localPatience,\r\n    localDelta,\r\n    localNSplits,\r\n    localUseAttention,\r\n    localMCDropout,\r\n    localMCSamples,\r\n    localOptimizer,\r\n    localCriterion,\r\n    setLstmParams,\r\n    setActive,\r\n    setIsDirty,\r\n    setParamsOpen,\r\n  ]);\r\n\r\n\r\n\r\n\r\n  const handleCancel = useCallback(() => {\r\n    setActive(false);\r\n    setIsDirty(true);\r\n  }, [setActive, setIsDirty]);\r\n\r\n  const toggleParams = useCallback(() => {\r\n    if (!paramsOpen && active) {\r\n      setActive(false);\r\n      setIsDirty(true);\r\n    }\r\n    setParamsOpen((prev) => !prev);\r\n  }, [paramsOpen, active, setActive, setIsDirty]);\r\n\r\n  const borderColor = active ? \"#10A37F\" : \"#FF4444\";\r\n\r\n  return (\r\n    <Paper sx={{ p: 2, mb: 2, border: `2px solid ${borderColor}`, borderRadius: 2 }}>\r\n      <Box sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n        <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\", color: \"#fff\" }}>\r\n          LSTM\r\n        </Typography>\r\n        <Button onClick={toggleParams} variant=\"text\" sx={{ color: \"#10A37F\" }}>\r\n          {paramsOpen ? \"Скрыть параметры\" : \"Показать параметры\"}\r\n        </Button>\r\n      </Box>\r\n      <Collapse in={paramsOpen}>\r\n        <Box\r\n          sx={{\r\n            mt: 1,\r\n            display: 'grid',\r\n            gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))',\r\n            gap: 2,\r\n          }}\r\n        >\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Длина последовательности (seq_length)</Typography>\r\n            <Slider value={localSeqLength} onChange={(e, val) => setLocalSeqLength(val)} min={1} max={50} step={1} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Периоды задержки (lag_periods)</Typography>\r\n            <Slider value={localLagPeriods} onChange={(e, val) => setLocalLagPeriods(val)} min={1} max={50} step={1} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Размеры окон (window_sizes, через запятую)</Typography>\r\n            <TextField\r\n              value={localWindowSizes}\r\n              onChange={(e) => setLocalWindowSizes(e.target.value)}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              sx={{ backgroundColor: \"#2c2c2c\", input: { color: \"#fff\" } }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Число слоёв (num_layers)</Typography>\r\n            <Slider value={localNumLayers} onChange={(e, val) => setLocalNumLayers(val)} min={1} max={4} step={1} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Размер скрытого состояния (hidden_dim)</Typography>\r\n            <Slider value={localHiddenDim} onChange={(e, val) => setLocalHiddenDim(val)} min={16} max={512} step={16} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Dropout</Typography>\r\n            <Slider value={localDropout} onChange={(e, val) => setLocalDropout(val)} min={0} max={1} step={0.05} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Batch Size</Typography>\r\n            <Slider value={localBatchSize} onChange={(e, val) => setLocalBatchSize(val)} min={8} max={128} step={8} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Эпохи (epochs)</Typography>\r\n            <Slider value={localEpochs} onChange={(e, val) => setLocalEpochs(val)} min={10} max={500} step={10} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Learning Rate</Typography>\r\n            <Slider value={localLearningRate} onChange={(e, val) => setLocalLearningRate(val)} min={0.0001} max={0.01} step={0.0001} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Patience</Typography>\r\n            <Slider value={localPatience} onChange={(e, val) => setLocalPatience(val)} min={1} max={50} step={1} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Delta</Typography>\r\n            <Slider value={localDelta} onChange={(e, val) => setLocalDelta(val)} min={0} max={0.01} step={0.0001} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>n_splits</Typography>\r\n            <Slider value={localNSplits} onChange={(e, val) => setLocalNSplits(val)} min={2} max={10} step={1} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <FormControlLabel\r\n              control={<Checkbox checked={localUseAttention} onChange={(e) => setLocalUseAttention(e.target.checked)} sx={{ color: \"#10A37F\" }} />}\r\n              label=\"Использовать внимание\"\r\n            />\r\n          </Box>\r\n          <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <FormControlLabel\r\n              control={<Checkbox checked={localMCDropout} onChange={(e) => setLocalMCDropout(e.target.checked)} sx={{ color: \"#10A37F\" }} />}\r\n              label=\"MC-Dropout\"\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>MC-Samples</Typography>\r\n            <Slider value={localMCSamples} onChange={(e, val) => setLocalMCSamples(val)} min={1} max={200} step={1} valueLabelDisplay=\"auto\" sx={{ color: \"#10A37F\" }} />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Тип оптимизатора</Typography>\r\n            <TextField\r\n              select\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={localOptimizer}\r\n              onChange={(e) => setLocalOptimizer(e.target.value)}\r\n              sx={{ backgroundColor: \"#2c2c2c\", input: { color: \"#fff\" } }}\r\n            >\r\n              <MenuItem value=\"AdamW\">AdamW</MenuItem>\r\n              <MenuItem value=\"Adam\">Adam</MenuItem>\r\n              <MenuItem value=\"SGD\">SGD</MenuItem>\r\n              <MenuItem value=\"RMSprop\">RMSprop</MenuItem>\r\n            </TextField>\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Критерий</Typography>\r\n            <TextField\r\n              select\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={localCriterion}\r\n              onChange={(e) => setLocalCriterion(e.target.value)}\r\n              sx={{ backgroundColor: \"#2c2c2c\", input: { color: \"#fff\" } }}\r\n            >\r\n              <MenuItem value=\"MSE\">MSE</MenuItem>\r\n              <MenuItem value=\"MAE\">MAE</MenuItem>\r\n              <MenuItem value=\"Huber\">Huber</MenuItem>\r\n            </TextField>\r\n          </Box>\r\n        </Box>\r\n      </Collapse>\r\n      <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", gap: 1, mt: 2 }}>\r\n        {active ? (\r\n          <Button variant=\"outlined\" startIcon={<CloseIcon />} onClick={handleCancel} sx={{ borderColor: \"#FF4444\", color: \"#FF4444\" }}>\r\n            Отключить\r\n          </Button>\r\n        ) : (\r\n          <Button variant=\"outlined\" startIcon={<CheckIcon />} onClick={handleApply} sx={{ borderColor: \"#10A37F\", color: \"#10A37F\" }}>\r\n            Активировать\r\n          </Button>\r\n        )}\r\n      </Box>\r\n    </Paper>\r\n  );\r\n});\r\n\r\nconst GRUBlock = memo(function GRUBlock({\r\n  active,\r\n  setActive,\r\n  gruParams,\r\n  setGruParams\r\n}) {\r\n  // Значения по умолчанию для модели GRU\r\n  const defaultParams = {\r\n    seq_length: 24,\r\n    lag_periods: 12,\r\n    window_sizes: \"6,12,24\", // вводится как строка; при применении преобразуется в массив чисел\r\n    num_layers: 3,\r\n    hidden_dim: 256,\r\n    dropout: 0.4,\r\n    batch_size: 128,\r\n    epochs: 300,\r\n    learning_rate: 0.0005,\r\n    patience: 20,\r\n    delta: 0.001,\r\n    n_splits: 5,\r\n    bidirectional: true,\r\n    residual_connections: true,\r\n    use_layer_norm: true,\r\n    mc_dropout: true,\r\n    mc_samples: 200,\r\n    optimizer_type: \"AdamW\",\r\n    criterion: \"Huber\"\r\n  };\r\n\r\n  const init = gruParams || defaultParams;\r\n\r\n  // Локальные состояния для всех параметров модели\r\n  const [localSeqLength, setLocalSeqLength] = useState(init.seq_length);\r\n  const [localLagPeriods, setLocalLagPeriods] = useState(init.lag_periods);\r\n  const [localWindowSizes, setLocalWindowSizes] = useState(init.window_sizes);\r\n  const [localNumLayers, setLocalNumLayers] = useState(init.num_layers);\r\n  const [localHiddenDim, setLocalHiddenDim] = useState(init.hidden_dim);\r\n  const [localDropout, setLocalDropout] = useState(init.dropout);\r\n  const [localBatchSize, setLocalBatchSize] = useState(init.batch_size);\r\n  const [localEpochs, setLocalEpochs] = useState(init.epochs);\r\n  const [localLearningRate, setLocalLearningRate] = useState(init.learning_rate);\r\n  const [localPatience, setLocalPatience] = useState(init.patience);\r\n  const [localDelta, setLocalDelta] = useState(init.delta);\r\n  const [localNSplits, setLocalNSplits] = useState(init.n_splits);\r\n  const [localBidirectional, setLocalBidirectional] = useState(init.bidirectional);\r\n  const [localResidualConnections, setLocalResidualConnections] = useState(init.residual_connections);\r\n  const [localUseLayerNorm, setLocalUseLayerNorm] = useState(init.use_layer_norm);\r\n  const [localMCDropout, setLocalMCDropout] = useState(init.mc_dropout);\r\n  const [localMCSamples, setLocalMCSamples] = useState(init.mc_samples);\r\n  const [localOptimizer, setLocalOptimizer] = useState(init.optimizer_type);\r\n  const [localCriterion, setLocalCriterion] = useState(init.criterion);\r\n\r\n  const { setIsDirty } = useContext(DashboardContext);\r\n  const [paramsOpen, setParamsOpen] = useState(false);\r\n\r\n  // Функция применения настроек. Если localWindowSizes является строкой, она разбивается на массив чисел.\r\n  const handleApply = useCallback(() => {\r\n    const parsedWindowSizes = Array.isArray(localWindowSizes)\r\n      ? localWindowSizes\r\n      : typeof localWindowSizes === \"string\"\r\n      ? localWindowSizes\r\n          .split(\",\")\r\n          .map((val) => parseInt(val.trim()))\r\n          .filter((val) => !isNaN(val))\r\n      : [];\r\n\r\n    setGruParams({\r\n      seq_length: localSeqLength,\r\n      lag_periods: localLagPeriods,\r\n      window_sizes: parsedWindowSizes,\r\n      num_layers: localNumLayers,\r\n      hidden_dim: localHiddenDim,\r\n      dropout: localDropout,\r\n      batch_size: localBatchSize,\r\n      epochs: localEpochs,\r\n      learning_rate: localLearningRate,\r\n      patience: localPatience,\r\n      delta: localDelta,\r\n      n_splits: localNSplits,\r\n      bidirectional: localBidirectional,\r\n      residual_connections: localResidualConnections,\r\n      use_layer_norm: localUseLayerNorm,\r\n      mc_dropout: localMCDropout,\r\n      mc_samples: localMCSamples,\r\n      optimizer_type: localOptimizer,\r\n      criterion: localCriterion,\r\n    });\r\n    setActive(true);\r\n    setIsDirty(true);\r\n    setParamsOpen(false);\r\n  }, [\r\n    localSeqLength,\r\n    localLagPeriods,\r\n    localWindowSizes,\r\n    localNumLayers,\r\n    localHiddenDim,\r\n    localDropout,\r\n    localBatchSize,\r\n    localEpochs,\r\n    localLearningRate,\r\n    localPatience,\r\n    localDelta,\r\n    localNSplits,\r\n    localBidirectional,\r\n    localResidualConnections,\r\n    localUseLayerNorm,\r\n    localMCDropout,\r\n    localMCSamples,\r\n    localOptimizer,\r\n    localCriterion,\r\n    setGruParams,\r\n    setActive,\r\n    setIsDirty,\r\n  ]);\r\n\r\n  const handleCancel = useCallback(() => {\r\n    setActive(false);\r\n    setIsDirty(true);\r\n  }, [setActive, setIsDirty]);\r\n\r\n  const toggleParams = useCallback(() => {\r\n    if (!paramsOpen && active) {\r\n      setActive(false);\r\n      setIsDirty(true);\r\n    }\r\n    setParamsOpen((prev) => !prev);\r\n  }, [paramsOpen, active, setActive, setIsDirty]);\r\n\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        p: 2,\r\n        mb: 2,\r\n        border: `2px solid ${active ? \"#10A37F\" : \"#FF4444\"}`,\r\n        borderRadius: 2,\r\n      }}\r\n    >\r\n      <Box sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n        <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\", color: \"#fff\" }}>\r\n          GRU\r\n        </Typography>\r\n        <Button onClick={toggleParams} variant=\"text\" sx={{ color: \"#10A37F\" }}>\r\n          {paramsOpen ? \"Скрыть параметры\" : \"Показать параметры\"}\r\n        </Button>\r\n      </Box>\r\n      <Collapse in={paramsOpen}>\r\n        <Box\r\n          sx={{\r\n            mt: 1,\r\n            display: \"grid\",\r\n            gridTemplateColumns: \"repeat(auto-fit, minmax(240px, 1fr))\",\r\n            gap: 2,\r\n          }}\r\n        >\r\n          {/* Числовые параметры */}\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              Длина последовательности (seq_length)\r\n            </Typography>\r\n            <Slider\r\n              value={localSeqLength}\r\n              onChange={(e, val) => setLocalSeqLength(val)}\r\n              min={1}\r\n              max={50}\r\n              step={1}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              Периоды задержки (lag_periods)\r\n            </Typography>\r\n            <Slider\r\n              value={localLagPeriods}\r\n              onChange={(e, val) => setLocalLagPeriods(val)}\r\n              min={1}\r\n              max={50}\r\n              step={1}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              Размеры окон (window_sizes, через запятую)\r\n            </Typography>\r\n            <TextField\r\n              value={localWindowSizes}\r\n              onChange={(e) => setLocalWindowSizes(e.target.value)}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              sx={{\r\n                backgroundColor: \"#2c2c2c\",\r\n                input: { color: \"#fff\" },\r\n              }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              Число слоёв (num_layers)\r\n            </Typography>\r\n            <Slider\r\n              value={localNumLayers}\r\n              onChange={(e, val) => setLocalNumLayers(val)}\r\n              min={1}\r\n              max={10}\r\n              step={1}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              Размер скрытого состояния (hidden_dim)\r\n            </Typography>\r\n            <Slider\r\n              value={localHiddenDim}\r\n              onChange={(e, val) => setLocalHiddenDim(val)}\r\n              min={16}\r\n              max={512}\r\n              step={16}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              Dropout\r\n            </Typography>\r\n            <Slider\r\n              value={localDropout}\r\n              onChange={(e, val) => setLocalDropout(val)}\r\n              min={0}\r\n              max={1}\r\n              step={0.05}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              Batch Size\r\n            </Typography>\r\n            <Slider\r\n              value={localBatchSize}\r\n              onChange={(e, val) => setLocalBatchSize(val)}\r\n              min={8}\r\n              max={256}\r\n              step={8}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              Эпохи (epochs)\r\n            </Typography>\r\n            <Slider\r\n              value={localEpochs}\r\n              onChange={(e, val) => setLocalEpochs(val)}\r\n              min={10}\r\n              max={500}\r\n              step={10}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              Learning Rate\r\n            </Typography>\r\n            <Slider\r\n              value={localLearningRate}\r\n              onChange={(e, val) => setLocalLearningRate(val)}\r\n              min={0.0001}\r\n              max={0.01}\r\n              step={0.0001}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              Patience\r\n            </Typography>\r\n            <Slider\r\n              value={localPatience}\r\n              onChange={(e, val) => setLocalPatience(val)}\r\n              min={1}\r\n              max={50}\r\n              step={1}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              Delta\r\n            </Typography>\r\n            <Slider\r\n              value={localDelta}\r\n              onChange={(e, val) => setLocalDelta(val)}\r\n              min={0}\r\n              max={0.01}\r\n              step={0.0001}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              n_splits\r\n            </Typography>\r\n            <Slider\r\n              value={localNSplits}\r\n              onChange={(e, val) => setLocalNSplits(val)}\r\n              min={2}\r\n              max={10}\r\n              step={1}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          {/* Булевы параметры */}\r\n          <Box>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={localBidirectional}\r\n                  onChange={(e) => setLocalBidirectional(e.target.checked)}\r\n                  sx={{ color: \"#10A37F\" }}\r\n                />\r\n              }\r\n              label=\"Bidirectional\"\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={localResidualConnections}\r\n                  onChange={(e) => setLocalResidualConnections(e.target.checked)}\r\n                  sx={{ color: \"#10A37F\" }}\r\n                />\r\n              }\r\n              label=\"Residual Connections\"\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={localUseLayerNorm}\r\n                  onChange={(e) => setLocalUseLayerNorm(e.target.checked)}\r\n                  sx={{ color: \"#10A37F\" }}\r\n                />\r\n              }\r\n              label=\"Layer Normalization\"\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={localMCDropout}\r\n                  onChange={(e) => setLocalMCDropout(e.target.checked)}\r\n                  sx={{ color: \"#10A37F\" }}\r\n                />\r\n              }\r\n              label=\"MC-Dropout\"\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>\r\n              MC-Samples\r\n            </Typography>\r\n            <Slider\r\n              value={localMCSamples}\r\n              onChange={(e, val) => setLocalMCSamples(val)}\r\n              min={1}\r\n              max={200}\r\n              step={1}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          {/* Выбор оптимизатора */}\r\n          <Box>\r\n            <FormControl fullWidth size=\"small\" sx={{ backgroundColor: \"#2c2c2c\", borderRadius: \"4px\" }}>\r\n              <InputLabel sx={{ color: \"#fff\" }}>Optimizer</InputLabel>\r\n              <Select\r\n                value={localOptimizer}\r\n                label=\"Optimizer\"\r\n                onChange={(e) => setLocalOptimizer(e.target.value)}\r\n                sx={{ color: \"#fff\", \".MuiOutlinedInput-notchedOutline\": { borderColor: \"#fff\" } }}\r\n              >\r\n                <MenuItem value=\"AdamW\">AdamW</MenuItem>\r\n                <MenuItem value=\"Adam\">Adam</MenuItem>\r\n                <MenuItem value=\"SGD\">SGD</MenuItem>\r\n                <MenuItem value=\"RMSprop\">RMSprop</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n          {/* Выбор критерия */}\r\n          <Box>\r\n            <FormControl fullWidth size=\"small\" sx={{ backgroundColor: \"#2c2c2c\", borderRadius: \"4px\" }}>\r\n              <InputLabel sx={{ color: \"#fff\" }}>Criterion</InputLabel>\r\n              <Select\r\n                value={localCriterion}\r\n                label=\"Criterion\"\r\n                onChange={(e) => setLocalCriterion(e.target.value)}\r\n                sx={{ color: \"#fff\", \".MuiOutlinedInput-notchedOutline\": { borderColor: \"#fff\" } }}\r\n              >\r\n                <MenuItem value=\"MSE\">MSE</MenuItem>\r\n                <MenuItem value=\"MAE\">MAE</MenuItem>\r\n                <MenuItem value=\"Huber\">Huber</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n        </Box>\r\n      </Collapse>\r\n      <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", gap: 1, mt: 2 }}>\r\n        {active ? (\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n            onClick={handleCancel}\r\n            sx={{ borderColor: \"#FF4444\", color: \"#FF4444\" }}\r\n          >\r\n            Отключить\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CheckIcon />}\r\n            onClick={handleApply}\r\n            sx={{ borderColor: \"#10A37F\", color: \"#10A37F\" }}\r\n          >\r\n            Активировать\r\n          </Button>\r\n        )}\r\n      </Box>\r\n    </Paper>\r\n  );\r\n});\r\n\r\nconst TransformerBlock = memo(function TransformerBlock({\r\n  active,\r\n  setActive,\r\n  transformerParams,\r\n  setTransformerParams,\r\n}) {\r\n  // Значения по умолчанию для Transformer, включая уникальные параметры\r\n  const defaultTransformerParams = {\r\n    seq_length: 24,\r\n    lag_periods: 12,\r\n    window_sizes: \"6,12,24\",\r\n    d_model: 256,\r\n    nhead: 8,\r\n    num_encoder_layers: 3,\r\n    num_decoder_layers: 1,\r\n    dim_feedforward: 512,\r\n    dropout: 0.2,\r\n    batch_size: 64,\r\n    epochs: 150,\r\n    learning_rate: 0.0005,\r\n    optimizer_type: \"AdamW\",\r\n    criterion: \"MSE\",\r\n    patience: 20,\r\n    delta: 0.001,\r\n    n_splits: 3,\r\n    mc_dropout: true,\r\n    mc_samples: 100,\r\n    use_encoder: true,\r\n    use_decoder: false,\r\n    activation: \"gelu\",\r\n  };\r\n\r\n  // Если transformerParams не определён, используем значения по умолчанию\r\n  const currentTransformerParams = transformerParams || defaultTransformerParams;\r\n\r\n  // Инициализация локальных состояний\r\n  const [localSeqLength, setLocalSeqLength] = useState(currentTransformerParams.seq_length);\r\n  const [localLagPeriods, setLocalLagPeriods] = useState(currentTransformerParams.lag_periods);\r\n  const [localWindowSizes, setLocalWindowSizes] = useState(currentTransformerParams.window_sizes);\r\n  const [localDModel, setLocalDModel] = useState(currentTransformerParams.d_model);\r\n  const [localNHead, setLocalNHead] = useState(currentTransformerParams.nhead);\r\n  const [localNumEncoderLayers, setLocalNumEncoderLayers] = useState(currentTransformerParams.num_encoder_layers);\r\n  const [localNumDecoderLayers, setLocalNumDecoderLayers] = useState(currentTransformerParams.num_decoder_layers);\r\n  const [localDimFeedforward, setLocalDimFeedforward] = useState(currentTransformerParams.dim_feedforward);\r\n  const [localDropout, setLocalDropout] = useState(currentTransformerParams.dropout);\r\n  const [localBatchSize, setLocalBatchSize] = useState(currentTransformerParams.batch_size);\r\n  const [localEpochs, setLocalEpochs] = useState(currentTransformerParams.epochs);\r\n  const [localLearningRate, setLocalLearningRate] = useState(currentTransformerParams.learning_rate);\r\n  const [localOptimizer, setLocalOptimizer] = useState(currentTransformerParams.optimizer_type);\r\n  const [localCriterion, setLocalCriterion] = useState(currentTransformerParams.criterion);\r\n\r\n  const [paramsOpen, setParamsOpen] = useState(false);\r\n  const { setIsDirty } = useContext(DashboardContext);\r\n\r\n  const handleApply = useCallback(() => {\r\n    setTransformerParams({\r\n      seq_length: localSeqLength,\r\n      lag_periods: localLagPeriods,\r\n      window_sizes: localWindowSizes,\r\n      d_model: localDModel,\r\n      nhead: localNHead,\r\n      num_encoder_layers: localNumEncoderLayers,\r\n      num_decoder_layers: localNumDecoderLayers,\r\n      dim_feedforward: localDimFeedforward,\r\n      dropout: localDropout,\r\n      batch_size: localBatchSize,\r\n      epochs: localEpochs,\r\n      learning_rate: localLearningRate,\r\n      optimizer_type: localOptimizer,\r\n      criterion: localCriterion,\r\n      // Подставляем либо существующие, либо дефолтные значения для остальных параметров:\r\n      patience: transformerParams?.patience ?? defaultTransformerParams.patience,\r\n      delta: transformerParams?.delta ?? defaultTransformerParams.delta,\r\n      n_splits: transformerParams?.n_splits ?? defaultTransformerParams.n_splits,\r\n      mc_dropout: transformerParams?.mc_dropout ?? defaultTransformerParams.mc_dropout,\r\n      mc_samples: transformerParams?.mc_samples ?? defaultTransformerParams.mc_samples,\r\n      use_encoder: transformerParams?.use_encoder ?? defaultTransformerParams.use_encoder,\r\n      use_decoder: transformerParams?.use_decoder ?? defaultTransformerParams.use_decoder,\r\n      activation: transformerParams?.activation ?? defaultTransformerParams.activation,\r\n    });\r\n    setActive(true);\r\n    setIsDirty(true);\r\n    setParamsOpen(false);\r\n  }, [\r\n    localSeqLength,\r\n    localLagPeriods,\r\n    localWindowSizes,\r\n    localDModel,\r\n    localNHead,\r\n    localNumEncoderLayers,\r\n    localNumDecoderLayers,\r\n    localDimFeedforward,\r\n    localDropout,\r\n    localBatchSize,\r\n    localEpochs,\r\n    localLearningRate,\r\n    localOptimizer,\r\n    localCriterion,\r\n    setTransformerParams,\r\n    setActive,\r\n    setIsDirty,\r\n    transformerParams,\r\n  ]);\r\n\r\n  const handleCancel = useCallback(() => {\r\n    setActive(false);\r\n    setIsDirty(true);\r\n  }, [setActive, setIsDirty]);\r\n\r\n  const toggleParams = useCallback(() => {\r\n    if (!paramsOpen && active) {\r\n      setActive(false);\r\n      setIsDirty(true);\r\n    }\r\n    setParamsOpen((prev) => !prev);\r\n  }, [paramsOpen, active, setActive, setIsDirty]);\r\n\r\n  const borderColor = active ? \"#10A37F\" : \"#FF4444\";\r\n\r\n  return (\r\n    <Paper sx={{ p: 2, mb: 2, border: `2px solid ${borderColor}`, borderRadius: 2 }}>\r\n      <Box sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n        <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\", color: \"#fff\" }}>\r\n          Transformer\r\n        </Typography>\r\n        <Button onClick={toggleParams} variant=\"text\" sx={{ color: \"#10A37F\" }}>\r\n          {paramsOpen ? \"Скрыть параметры\" : \"Показать параметры\"}\r\n        </Button>\r\n      </Box>\r\n      <Collapse in={paramsOpen}>\r\n        <Box\r\n          sx={{\r\n            mt: 1,\r\n            display: \"grid\",\r\n            gridTemplateColumns: \"repeat(auto-fit, minmax(240px, 1fr))\",\r\n            gap: 2,\r\n          }}\r\n        >\r\n          {/* Параметры последовательности */}\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Длина последовательности (seq_length)</Typography>\r\n            <Slider\r\n              value={localSeqLength}\r\n              onChange={(e, val) => setLocalSeqLength(val)}\r\n              min={1}\r\n              max={50}\r\n              step={1}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Периоды задержки (lag_periods)</Typography>\r\n            <Slider\r\n              value={localLagPeriods}\r\n              onChange={(e, val) => setLocalLagPeriods(val)}\r\n              min={1}\r\n              max={50}\r\n              step={1}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Размеры окон (window_sizes)</Typography>\r\n            <TextField\r\n              value={localWindowSizes}\r\n              onChange={(e) => setLocalWindowSizes(e.target.value)}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              sx={{ backgroundColor: \"#2c2c2c\", input: { color: \"#fff\" } }}\r\n            />\r\n          </Box>\r\n          {/* Параметры архитектуры Transformer */}\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>d_model</Typography>\r\n            <Slider\r\n              value={localDModel}\r\n              onChange={(e, val) => setLocalDModel(val)}\r\n              min={128}\r\n              max={512}\r\n              step={16}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>nhead</Typography>\r\n            <Slider\r\n              value={localNHead}\r\n              onChange={(e, val) => setLocalNHead(val)}\r\n              min={1}\r\n              max={16}\r\n              step={1}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Encoder Layers</Typography>\r\n            <Slider\r\n              value={localNumEncoderLayers}\r\n              onChange={(e, val) => setLocalNumEncoderLayers(val)}\r\n              min={1}\r\n              max={6}\r\n              step={1}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Decoder Layers</Typography>\r\n            <Slider\r\n              value={localNumDecoderLayers}\r\n              onChange={(e, val) => setLocalNumDecoderLayers(val)}\r\n              min={0}\r\n              max={4}\r\n              step={1}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>dim_feedforward</Typography>\r\n            <Slider\r\n              value={localDimFeedforward}\r\n              onChange={(e, val) => setLocalDimFeedforward(val)}\r\n              min={256}\r\n              max={1024}\r\n              step={32}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Dropout</Typography>\r\n            <Slider\r\n              value={localDropout}\r\n              onChange={(e, val) => setLocalDropout(val)}\r\n              min={0}\r\n              max={1}\r\n              step={0.05}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          {/* Параметры обучения */}\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Batch Size</Typography>\r\n            <Slider\r\n              value={localBatchSize}\r\n              onChange={(e, val) => setLocalBatchSize(val)}\r\n              min={8}\r\n              max={256}\r\n              step={8}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Эпохи (epochs)</Typography>\r\n            <Slider\r\n              value={localEpochs}\r\n              onChange={(e, val) => setLocalEpochs(val)}\r\n              min={10}\r\n              max={500}\r\n              step={10}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\" sx={{ color: \"#fff\" }}>Learning Rate</Typography>\r\n            <Slider\r\n              value={localLearningRate}\r\n              onChange={(e, val) => setLocalLearningRate(val)}\r\n              min={0.0001}\r\n              max={0.01}\r\n              step={0.0001}\r\n              valueLabelDisplay=\"auto\"\r\n              sx={{ color: \"#10A37F\" }}\r\n            />\r\n          </Box>\r\n          {/* Выбор оптимайзера */}\r\n          <Box>\r\n            <FormControl fullWidth size=\"small\" sx={{ backgroundColor: \"#2c2c2c\", borderRadius: \"4px\" }}>\r\n              <InputLabel sx={{ color: \"#fff\" }}>Optimizer</InputLabel>\r\n              <Select\r\n                value={localOptimizer}\r\n                label=\"Optimizer\"\r\n                onChange={(e) => setLocalOptimizer(e.target.value)}\r\n                sx={{ color: \"#fff\", \".MuiOutlinedInput-notchedOutline\": { borderColor: \"#fff\" } }}\r\n              >\r\n                <MenuItem value=\"AdamW\">AdamW</MenuItem>\r\n                <MenuItem value=\"Adam\">Adam</MenuItem>\r\n                <MenuItem value=\"SGD\">SGD</MenuItem>\r\n                <MenuItem value=\"RMSprop\">RMSprop</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n          {/* Выбор критерия */}\r\n          <Box>\r\n            <FormControl fullWidth size=\"small\" sx={{ backgroundColor: \"#2c2c2c\", borderRadius: \"4px\" }}>\r\n              <InputLabel sx={{ color: \"#fff\" }}>Criterion</InputLabel>\r\n              <Select\r\n                value={localCriterion}\r\n                label=\"Criterion\"\r\n                onChange={(e) => setLocalCriterion(e.target.value)}\r\n                sx={{ color: \"#fff\", \".MuiOutlinedInput-notchedOutline\": { borderColor: \"#fff\" } }}\r\n              >\r\n                <MenuItem value=\"MSE\">MSE</MenuItem>\r\n                <MenuItem value=\"MAE\">MAE</MenuItem>\r\n                <MenuItem value=\"Huber\">Huber</MenuItem>\r\n                <MenuItem value=\"Huber\">SmoothL1</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n        </Box>\r\n      </Collapse>\r\n      <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", gap: 1, mt: 2 }}>\r\n        {active ? (\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CloseIcon />}\r\n            onClick={handleCancel}\r\n            sx={{ borderColor: \"#FF4444\", color: \"#FF4444\" }}\r\n          >\r\n            Отключить\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CheckIcon />}\r\n            onClick={handleApply}\r\n            sx={{ borderColor: \"#10A37F\", color: \"#10A37F\" }}\r\n          >\r\n            Активировать\r\n          </Button>\r\n        )}\r\n      </Box>\r\n\r\n    </Paper>\r\n  );\r\n});\r\n\r\n\r\n\r\n// =======================\r\n// Основной компонент ForecastPage\r\n// =======================\r\nexport default function ForecastPage() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const {\r\n    forecastPageState,\r\n    setForecastPageState,\r\n    forecastResults,\r\n    setForecastResults,\r\n    selectedColumns,\r\n    filteredData,\r\n    setIsDirty,\r\n    filters\r\n  } = useContext(DashboardContext);\r\n\r\n  const stateModifiedData = location.state?.modifiedData || [];\r\n  const stateSelectedColumns = location.state?.selectedColumns || [];\r\n  const initialModifiedData = stateModifiedData.length ? stateModifiedData : [];\r\n  const initialSelectedColumns = stateSelectedColumns.length ? stateSelectedColumns : [];\r\n\r\n  useEffect(() => {\r\n    if (!initialModifiedData || initialModifiedData.length === 0 || initialSelectedColumns.length < 2) {\r\n      navigate(-1);\r\n    }\r\n  }, [initialModifiedData, initialSelectedColumns, navigate]);\r\n\r\n  const {\r\n    prophetActive,\r\n    prophetParams,\r\n    xgboostActive,\r\n    xgboostParams,\r\n    sarimaActive,\r\n    sarimaParams,\r\n    lstmActive,\r\n    lstmParams,\r\n    gruActive,    // добавлено\r\n    gruParams,    // добавлено\r\n    transformerActive,      // ← Добавляем сюда\r\n    transformerParams,      // ← Добавляем сюда\r\n    commonTab,\r\n    modelTab,\r\n    modelSubTabs,\r\n    modelsOpen,\r\n    csvSelectedCols,\r\n    fileType,\r\n    horizon,\r\n    historySize,\r\n    freq,\r\n    confidenceLevel,\r\n  } = forecastPageState;\r\n\r\n  const [localCommonParams, setLocalCommonParams] = useState({\r\n    horizon: horizon,\r\n    historySize: historySize,\r\n    freq: freq,\r\n    confidenceLevel: confidenceLevel,\r\n  });\r\n  const [freqError, setFreqError] = useState(\"\");\r\n  const validFreqRegex = /^[A-Z]+(-[A-Z]+)?$/;\r\n  const [allPossibleCols, setAllPossibleCols] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const colSet = new Set([\"ds\", \"y_fact\"]);\r\n    forecastResults.forEach((m) => {\r\n      const arr = [\r\n        ...m.forecastAll,\r\n        ...m.forecastTrain,\r\n        ...m.forecastTest,\r\n        ...m.forecastHorizon,\r\n      ];\r\n      arr.forEach((row) => {\r\n        if (row.y_forecast !== undefined && row.y_forecast !== \"\")\r\n          colSet.add(`${m.modelName}_y_forecast`);\r\n        if (row.yhat_lower !== undefined && row.yhat_lower !== \"\")\r\n          colSet.add(`${m.modelName}_yhat_lower`);\r\n        if (row.yhat_upper !== undefined && row.yhat_upper !== \"\")\r\n          colSet.add(`${m.modelName}_yhat_upper`);\r\n      });\r\n    });\r\n    setAllPossibleCols(Array.from(colSet));\r\n  }, [forecastResults]);\r\n\r\n  const mergedRows = useMemo(() => {\r\n    const bigMap = new Map();\r\n    forecastResults.forEach((m) => {\r\n      const combined = [\r\n        ...m.forecastAll,\r\n        ...m.forecastTrain,\r\n        ...m.forecastTest,\r\n        ...m.forecastHorizon,\r\n      ];\r\n      combined.forEach((row) => {\r\n        if (!bigMap.has(row.ds)) {\r\n          bigMap.set(row.ds, { ds: row.ds, y_fact: null });\r\n        }\r\n        const val = bigMap.get(row.ds);\r\n        if (row.y_fact != null) val.y_fact = row.y_fact;\r\n        if (row.y_forecast != null)\r\n          val[`${m.modelName}_y_forecast`] = row.y_forecast;\r\n        if (row.yhat_lower != null)\r\n          val[`${m.modelName}_yhat_lower`] = row.yhat_lower;\r\n        if (row.yhat_upper != null)\r\n          val[`${m.modelName}_yhat_upper`] = row.yhat_upper;\r\n      });\r\n    });\r\n    const allDs = Array.from(bigMap.keys()).sort((a, b) => new Date(a) - new Date(b));\r\n    return allDs.map((ds) => bigMap.get(ds));\r\n  }, [forecastResults]);\r\n\r\n  const combinedChartData = useMemo(() => {\r\n    const subset = forecastResults.map((mRes) => {\r\n      let segment = [];\r\n      if (commonTab === 0) segment = mRes.forecastAll;\r\n      else if (commonTab === 1) segment = mRes.forecastTrain;\r\n      else if (commonTab === 2) segment = mRes.forecastTest;\r\n      else if (commonTab === 3) segment = mRes.forecastHorizon;\r\n      else if (commonTab === 4)\r\n        segment = [...mRes.forecastAll, ...mRes.forecastHorizon];\r\n      return { modelName: mRes.modelName, segment };\r\n    });\r\n    const modelColorMap = {\r\n      Prophet: \"#36A2EB\",\r\n      XGBoost: \"#ff6382\",\r\n      SARIMA: \"#f8fd68\",\r\n      LSTM: \"#a569bd\",\r\n      Transformer: \"#00FF00\"\r\n    };\r\n    return makeCombinedChartData(subset, modelColorMap);\r\n  }, [forecastResults, commonTab]);\r\n\r\n  const [csvDialogOpen, setCsvDialogOpen] = useState(false);\r\n  const [previewData, setPreviewData] = useState([]);\r\n\r\n  const handleOpenCsvDialog = useCallback(() => {\r\n    setPreviewData(mergedRows.slice(0, 5));\r\n    setCsvDialogOpen(true);\r\n  }, [mergedRows]);\r\n\r\n  const handleCloseCsvDialog = useCallback(() => setCsvDialogOpen(false), []);\r\n\r\n  const handleDownloadSelectedCols = useCallback(() => {\r\n    const finalCols = csvSelectedCols.length ? csvSelectedCols : allPossibleCols;\r\n    const finalData = mergedRows.map((r) => {\r\n      const obj = {};\r\n      finalCols.forEach((col) => {\r\n        obj[col] = r[col] !== undefined ? r[col] : \"\";\r\n      });\r\n      return obj;\r\n    });\r\n    if (fileType === \"csv\") {\r\n      const header = finalCols.join(\",\");\r\n      const rows = finalData.map((row) =>\r\n        finalCols.map((c) => (row[c] || \"\")).join(\",\")\r\n      );\r\n      const csvContent = [header, ...rows].join(\"\\n\");\r\n      const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n      saveAs(blob, \"forecast.csv\");\r\n    } else {\r\n      const ws = XLSX.utils.json_to_sheet(finalData, { header: finalCols });\r\n      const wb = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(wb, ws, \"ForecastData\");\r\n      XLSX.writeFile(wb, \"forecast.xlsx\");\r\n    }\r\n    setCsvDialogOpen(false);\r\n  }, [allPossibleCols, csvSelectedCols, fileType, mergedRows]);\r\n\r\n  const handleCommonTabChange = useCallback((e, val) => {\r\n    setForecastPageState((prev) => ({ ...prev, commonTab: val }));\r\n  }, [setForecastPageState]);\r\n\r\n  const handleModelTabChange = useCallback((e, val) => {\r\n    setForecastPageState((prev) => ({ ...prev, modelTab: val }));\r\n  }, [setForecastPageState]);\r\n\r\n  const handleModelSubTabChange = useCallback((modelIndex, val) => {\r\n    setForecastPageState((prev) => ({\r\n      ...prev,\r\n      modelSubTabs: { ...prev.modelSubTabs, [modelIndex]: val },\r\n    }));\r\n  }, [setForecastPageState]);\r\n\r\n  const handleBack = useCallback(() => navigate(-1), [navigate]);\r\n\r\n  const toggleModels = useCallback(() => {\r\n    setForecastPageState((prev) => {\r\n      const newState = { ...prev, modelsOpen: !prev.modelsOpen };\r\n      setIsDirty(true);\r\n      return newState;\r\n    });\r\n  }, [setForecastPageState, setIsDirty]);\r\n\r\n  const chartOptions = useMemo(\r\n    () => ({\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: { legend: { labels: { color: \"#fff\" } } },\r\n      scales: {\r\n        x: {\r\n          ticks: {\r\n            color: \"#fff\",\r\n            callback: function (value) {\r\n              const label = this.getLabelForValue(value);\r\n              return label ? label.slice(0, 10) : \"\";\r\n            },\r\n          },\r\n          grid: { color: \"rgba(255,255,255,0.1)\" },\r\n        },\r\n        y: {\r\n          ticks: { color: \"#fff\" },\r\n          grid: { color: \"rgba(255,255,255,0.1)\" },\r\n        },\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, x: 50 }}\r\n      animate={{ opacity: 1, x: 0 }}\r\n      exit={{ opacity: 0, x: -50 }}\r\n      transition={{ duration: 0.3 }}\r\n      style={{ position: \"relative\", minHeight: \"100vh\" }}\r\n    >\r\n      <Canvas camera={{ position: [0, 0, 1] }} style={{ position: \"fixed\", top: 0, left: 0 }}>\r\n        <ParticleBackground />\r\n      </Canvas>\r\n      <Box sx={{ position: \"relative\", minHeight: \"100vh\" }}>\r\n        <Box sx={{ display: \"flex\", justifyContent: \"space-between\", m: 2, pt: 2 }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={handleBack}\r\n            startIcon={<ArrowBackIcon />}\r\n            sx={{\r\n              background: \"rgba(16,163,127,0.15)\",\r\n              color: \"#10A37F\",\r\n              borderRadius: \"12px\",\r\n              px: 3,\r\n              \"&:hover\": { background: \"rgba(16,163,127,0.3)\" },\r\n            }}\r\n          >\r\n            Назад\r\n          </Button>\r\n          <Typography\r\n            variant=\"h4\"\r\n            sx={{\r\n              fontWeight: 700,\r\n              background: \"linear-gradient(45deg, #10A37F 30%, #00ff88 100%)\",\r\n              WebkitBackgroundClip: \"text\",\r\n              WebkitTextFillColor: \"transparent\",\r\n            }}\r\n          >\r\n            Прогнозирование\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={toggleModels}\r\n            endIcon={<ArrowForwardIcon />}\r\n            sx={{\r\n              background: \"rgba(16,163,127,0.15)\",\r\n              color: \"#10A37F\",\r\n              borderRadius: \"12px\",\r\n              px: 3,\r\n              \"&:hover\": { background: \"rgba(16,163,127,0.3)\" },\r\n            }}\r\n          >\r\n            Модели\r\n          </Button>\r\n        </Box>\r\n        <Box sx={{ pt: 2 }}>\r\n          <CategoricalDataBlock filteredData={filteredData} selectedColumns={selectedColumns} filters={filters} />\r\n        </Box>\r\n        <Box sx={{ position: \"relative\", width: \"100%\", height: \"calc(100vh - 56px)\", alignItems: \"center\" }}>\r\n          <Box sx={{ flexGrow: 1, transition: \"margin-right 0.3s\", marginRight: modelsOpen ? \"336px\" : 0, overflowY: \"auto\", \"&::-webkit-scrollbar\": { display: \"none\" } }}>\r\n            <Paper\r\n              sx={{\r\n                background: \"rgba(255, 255, 255, 0.05)\",\r\n                m: 2,\r\n                borderRadius: \"16px\",\r\n                border: \"1px solid rgba(255,255,255,0.1)\",\r\n                backdropFilter: \"blur(12px)\",\r\n                boxShadow: \"0 8px 32px rgba(0,0,0,0.2)\",\r\n                p: 3,\r\n              }}\r\n            >\r\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                Общие параметры прогноза\r\n              </Typography>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={6} md={3}>\r\n                  <Typography gutterBottom>Горизонт: {localCommonParams.horizon}</Typography>\r\n                  <Slider\r\n                    value={localCommonParams.horizon}\r\n                    onChange={(e, val) =>\r\n                      setLocalCommonParams((prev) => ({ ...prev, horizon: val }))\r\n                    }\r\n                    min={0}\r\n                    max={50}\r\n                    step={1}\r\n                    valueLabelDisplay=\"auto\"\r\n                    sx={{ color: \"#10A37F\" }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3}>\r\n                  <Typography gutterBottom>\r\n                    History (Test Size): {localCommonParams.historySize}\r\n                  </Typography>\r\n                  <Slider\r\n                    value={localCommonParams.historySize}\r\n                    onChange={(e, val) =>\r\n                      setLocalCommonParams((prev) => ({ ...prev, historySize: val }))\r\n                    }\r\n                    min={0}\r\n                    max={50}\r\n                    step={1}\r\n                    valueLabelDisplay=\"auto\"\r\n                    sx={{ color: \"#10A37F\" }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3}>\r\n                  <TextField\r\n                    label=\"Частота\"\r\n                    value={localCommonParams.freq}\r\n                    error={!!freqError}\r\n                    placeholder={freqError ? \"Частота некорректная\" : \"\"}\r\n                    onChange={(e) =>\r\n                      setLocalCommonParams((prev) => ({ ...prev, freq: e.target.value }))\r\n                    }\r\n                    onFocus={() => setFreqError(\"\")}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    sx={{\r\n                      backgroundColor: \"rgba(255, 255, 255, 0.05)\",\r\n                      borderRadius: \"10px\",\r\n                      input: { color: \"#fff\" },\r\n                      \"& .MuiOutlinedInput-root\": {\r\n                        \"& fieldset\": {\r\n                          borderColor: freqError ? \"red\" : \"#fff\",\r\n                        },\r\n                      },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={3}>\r\n                  <Typography gutterBottom>\r\n                    Уровень доверия: {localCommonParams.confidenceLevel}%\r\n                  </Typography>\r\n                  <Slider\r\n                    value={localCommonParams.confidenceLevel}\r\n                    onChange={(e, val) =>\r\n                      setLocalCommonParams((prev) => ({\r\n                        ...prev,\r\n                        confidenceLevel: val,\r\n                      }))\r\n                    }\r\n                    min={80}\r\n                    max={99}\r\n                    step={1}\r\n                    valueLabelDisplay=\"auto\"\r\n                    sx={{ color: \"#10A37F\" }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Box sx={{ mt: 3, textAlign: \"center\" }}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={async () => {\r\n                    if (!validFreqRegex.test(localCommonParams.freq)) {\r\n                      setFreqError(\"Некорректная частота\");\r\n                      return;\r\n                    }\r\n                    setForecastPageState((prev) => ({\r\n                      ...prev,\r\n                      horizon: localCommonParams.horizon,\r\n                      historySize: localCommonParams.historySize,\r\n                      freq: localCommonParams.freq,\r\n                      confidenceLevel: localCommonParams.confidenceLevel,\r\n                    }));\r\n                    try {\r\n                      const activeModels = [];\r\n                      if (prophetActive)\r\n                        activeModels.push({\r\n                          model: \"Prophet\",\r\n                          uniqueParams: prophetParams,\r\n                        });\r\n                      if (xgboostActive)\r\n                        activeModels.push({\r\n                          model: \"XGBoost\",\r\n                          uniqueParams: xgboostParams,\r\n                        });\r\n                      if (sarimaActive)\r\n                        activeModels.push({\r\n                          model: \"SARIMA\",\r\n                          uniqueParams: sarimaParams,\r\n                        });\r\n                      if (lstmActive)\r\n                        activeModels.push({\r\n                          model: \"LSTM\",\r\n                          uniqueParams: lstmParams,\r\n                        });\r\n                      if (gruActive)\r\n                        activeModels.push({\r\n                          model: \"GRU\",\r\n                          uniqueParams: gruParams,\r\n                        });\r\n                      if (transformerActive)\r\n                        activeModels.push({\r\n                          model: \"Transformer\",\r\n                          uniqueParams: transformerParams,\r\n                        });\r\n\r\n\r\n                      const newResults = [];\r\n                      for (let m of activeModels) {\r\n                        const payload = {\r\n                          model: m.model,\r\n                          uniqueParams: m.uniqueParams,\r\n                          horizon: localCommonParams.horizon,\r\n                          history: localCommonParams.historySize,\r\n                          dt_name: initialSelectedColumns[0] || \"ds\",\r\n                          y_name: initialSelectedColumns[1] || \"y\",\r\n                          freq: localCommonParams.freq,\r\n                          confidence_level: localCommonParams.confidenceLevel,\r\n                          data: initialModifiedData,\r\n                        };\r\n                        const resp = await axios.post(\"http://localhost:8000/api/forecast\", payload);\r\n                        const { forecast_all, forecast_train, forecast_test, forecast_horizon } = resp.data;\r\n                        newResults.push({\r\n                          modelName: m.model,\r\n                          forecastAll: forecast_all || [],\r\n                          forecastTrain: forecast_train || [],\r\n                          forecastTest: forecast_test || [],\r\n                          forecastHorizon: forecast_horizon || [],\r\n                        });\r\n                      }\r\n                      setForecastResults(newResults);\r\n                    } catch (err) {\r\n                      console.error(\"Ошибка прогноза:\", err);\r\n                    }\r\n                  }}\r\n\r\n                  disabled={false}\r\n                  sx={{ borderRadius: \"16px\", backgroundColor: \"#10A37F\" }}\r\n                >\r\n                  <CircularProgress size={24} sx={{ display: \"none\" }} />\r\n                  Построить прогноз\r\n                </Button>\r\n              </Box>\r\n            </Paper>\r\n            {forecastResults.length > 0 && (\r\n              <Paper\r\n                sx={{\r\n                  background: \"rgba(255, 255, 255, 0.05)\",\r\n                  m: 2,\r\n                  borderRadius: \"16px\",\r\n                  border: \"1px solid rgba(255,255,255,0.1)\",\r\n                  backdropFilter: \"blur(12px)\",\r\n                  boxShadow: \"0 8px 32px rgba(0,0,0,0.2)\",\r\n                  p: 3,\r\n                }}\r\n              >\r\n                <Typography variant=\"h6\" sx={{ mb: 1 }}>\r\n                  Общий график (все модели)\r\n                </Typography>\r\n                <Tabs\r\n                  value={commonTab}\r\n                  onChange={handleCommonTabChange}\r\n                  textColor=\"inherit\"\r\n                  indicatorColor=\"primary\"\r\n                  sx={{ mb: 2 }}\r\n                >\r\n                  <Tab label=\"All\" />\r\n                  <Tab label=\"Train\" />\r\n                  <Tab label=\"Test\" />\r\n                  <Tab label=\"Horizon\" />\r\n                  <Tab label=\"All+Horizon\" />\r\n                </Tabs>\r\n                <Box sx={{ height: 500 }}>\r\n                  <Line data={combinedChartData} options={chartOptions} />\r\n                </Box>\r\n                <Box sx={{ textAlign: \"center\", mt: 2 }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={handleOpenCsvDialog}\r\n                    sx={{ borderRadius: \"12px\", backgroundColor: \"#10A37F\" }}\r\n                  >\r\n                    Скачать (All Models)\r\n                  </Button>\r\n                </Box>\r\n              </Paper>\r\n            )}\r\n            {forecastResults.length > 0 && (\r\n              <Paper\r\n                sx={{\r\n                  background: \"rgba(255, 255, 255, 0.05)\",\r\n                  m: 2,\r\n                  borderRadius: \"16px\",\r\n                  border: \"1px solid rgba(255,255,255,0.1)\",\r\n                  backdropFilter: \"blur(12px)\",\r\n                  boxShadow: \"0 8px 32px rgba(0,0,0,0.2)\",\r\n                  p: 3,\r\n                }}\r\n              >\r\n                <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                  Отдельные модели\r\n                </Typography>\r\n                <Tabs\r\n                  value={modelTab}\r\n                  onChange={handleModelTabChange}\r\n                  textColor=\"inherit\"\r\n                  indicatorColor=\"primary\"\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n                  sx={{ mb: 2 }}\r\n                >\r\n                  {forecastResults.map((mRes) => (\r\n                    <Tab key={mRes.modelName} label={mRes.modelName} />\r\n                  ))}\r\n                </Tabs>\r\n                {forecastResults[modelTab] &&\r\n                  (() => {\r\n                    const curModel = forecastResults[modelTab];\r\n                    const modelColorMap = {\r\n                      Prophet: \"#ffd6ab\",\r\n                      XGBoost: \"#ff6382\",\r\n                      SARIMA: \"#ff9000\",\r\n                      LSTM: \"#a569bd\",\r\n                      GRU: \"#00bcd4\",\r\n                    };\r\n                    const color = modelColorMap[curModel.modelName] || \"#36A2EB\";\r\n                    const subTab = modelSubTabs[modelTab] || 0;\r\n                    const handleSubTabChange = (e, val) =>\r\n                      handleModelSubTabChange(modelTab, val);\r\n                    const metricsAll = computeMetricsOnStandardized(curModel.forecastAll);\r\n                    const metricsTrain = computeMetricsOnStandardized(curModel.forecastTrain);\r\n                    const metricsTest = computeMetricsOnStandardized(curModel.forecastTest);\r\n                    const chartAll = makeSingleModelChartData(curModel.forecastAll, color);\r\n                    const chartTrain = makeSingleModelChartData(curModel.forecastTrain, color);\r\n                    const chartTest = makeSingleModelChartData(curModel.forecastTest, color);\r\n                    const chartHorizon = makeSingleModelChartData(curModel.forecastHorizon, color);\r\n                    return (\r\n                      <Box>\r\n                        <Tabs\r\n                          value={subTab}\r\n                          onChange={handleSubTabChange}\r\n                          textColor=\"inherit\"\r\n                          indicatorColor=\"primary\"\r\n                          sx={{ mb: 2 }}\r\n                        >\r\n                          <Tab label=\"All\" disabled={curModel.forecastAll.length === 0} />\r\n                          <Tab label=\"Train\" disabled={curModel.forecastTrain.length === 0} />\r\n                          <Tab label=\"Test\" disabled={curModel.forecastTest.length === 0} />\r\n                          <Tab label=\"Horizon\" disabled={curModel.forecastHorizon.length === 0} />\r\n                        </Tabs>\r\n                        {subTab === 0 && (\r\n                          <Box sx={{ height: 400 }}>\r\n                            <Line data={chartAll} options={chartOptions} />\r\n                            {metricsAll && (\r\n                              <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 1, mt: 2, pt: 3, pb: 10 }}>\r\n                                <AnimatedMetricChip label=\"MAE\" value={metricsAll.mae} type=\"mae\" icon={<TrendingDownIcon />} />\r\n                                <AnimatedMetricChip label=\"RMSE\" value={metricsAll.rmse} type=\"rmse\" icon={<ShowChartIcon />} />\r\n                                {metricsAll.mape !== null && (\r\n                                  <AnimatedMetricChip label=\"MAPE\" value={metricsAll.mape} type=\"mape\" icon={<PercentIcon />} />\r\n                                )}\r\n                              </Box>\r\n                            )}\r\n                          </Box>\r\n                        )}\r\n                        {subTab === 1 && (\r\n                          <Box sx={{ height: 400 }}>\r\n                            <Line data={chartTrain} options={chartOptions} />\r\n                            {metricsTrain && (\r\n                              <Box sx={{ display: \"flex\", gap: 2, mt: 2 }}>\r\n                                <Typography>MAE: {metricsTrain.mae.toFixed(4)}</Typography>\r\n                                <Typography>RMSE: {metricsTrain.rmse.toFixed(4)}</Typography>\r\n                                {metricsTrain.mape && <Typography>MAPE: {metricsTrain.mape.toFixed(2)}%</Typography>}\r\n                              </Box>\r\n                            )}\r\n                          </Box>\r\n                        )}\r\n                        {subTab === 2 && (\r\n                          <Box sx={{ height: 400 }}>\r\n                            <Line data={chartTest} options={chartOptions} />\r\n                            {metricsTest && (\r\n                              <Box sx={{ display: \"flex\", gap: 2, mt: 2 }}>\r\n                                <Typography>MAE: {metricsTest.mae.toFixed(4)}</Typography>\r\n                                <Typography>RMSE: {metricsTest.rmse.toFixed(4)}</Typography>\r\n                                {metricsTest.mape && <Typography>MAPE: {metricsTest.mape.toFixed(2)}%</Typography>}\r\n                              </Box>\r\n                            )}\r\n                          </Box>\r\n                        )}\r\n                        {subTab === 3 && (\r\n                          <Box sx={{ height: 400 }}>\r\n                            <Line data={chartHorizon} options={chartOptions} />\r\n                            <Typography sx={{ mt: 2 }}>Прогноз будущего (факт отсутствует).</Typography>\r\n                          </Box>\r\n                        )}\r\n                      </Box>\r\n                    );\r\n                  })()}\r\n              </Paper>\r\n            )}\r\n          </Box>\r\n          <Slide direction=\"left\" in={modelsOpen}>\r\n            <Box\r\n              sx={{\r\n                position: \"absolute\",\r\n                top: 16,\r\n                right: 16,\r\n                width: \"320px\",\r\n                background: \"rgba(255, 255, 255, 0.05)\",\r\n                borderRadius: \"16px\",\r\n                border: \"1px solid rgba(255,255,255,0.1)\",\r\n                backdropFilter: \"blur(12px)\",\r\n                boxShadow: \"0 8px 32px rgba(0,0,0,0.2)\",\r\n                height: \"calc(100vh - 72px)\",\r\n                p: 2,\r\n                overflowY: \"auto\",\r\n                \"&::-webkit-scrollbar\": { width: 0 },\r\n                scrollbarWidth: \"none\",\r\n                msOverflowStyle: \"none\",\r\n              }}\r\n            >\r\n              <Typography variant=\"h6\" sx={{ color: \"#fff\", mb: 2 }}>\r\n                Модели\r\n              </Typography>\r\n              <ProphetBlock\r\n                active={prophetActive}\r\n                setActive={(val) =>\r\n                  setForecastPageState((prev) => ({ ...prev, prophetActive: val }))\r\n                }\r\n                prophetParams={prophetParams}\r\n                setProphetParams={(params) =>\r\n                  setForecastPageState((prev) => ({ ...prev, prophetParams: params }))\r\n                }\r\n              />\r\n              <XGBoostBlock\r\n                active={xgboostActive}\r\n                setActive={(val) =>\r\n                  setForecastPageState((prev) => ({ ...prev, xgboostActive: val }))\r\n                }\r\n                xgboostParams={xgboostParams}\r\n                setXgboostParams={(params) =>\r\n                  setForecastPageState((prev) => ({ ...prev, xgboostParams: params }))\r\n                }\r\n              />\r\n              <SarimaBlock\r\n                active={sarimaActive}\r\n                setActive={(val) =>\r\n                  setForecastPageState((prev) => ({ ...prev, sarimaActive: val }))\r\n                }\r\n                sarimaParams={sarimaParams}\r\n                setSarimaParams={(params) =>\r\n                  setForecastPageState((prev) => ({ ...prev, sarimaParams: params }))\r\n                }\r\n              />\r\n              <LSTMBlock\r\n                active={lstmActive}\r\n                setActive={(val) =>\r\n                  setForecastPageState((prev) => ({ ...prev, lstmActive: val }))\r\n                }\r\n                lstmParams={lstmParams}\r\n                setLstmParams={(params) =>\r\n                  setForecastPageState((prev) => ({ ...prev, lstmParams: params }))\r\n                }\r\n              />\r\n              <GRUBlock\r\n                active={gruActive}\r\n                setActive={(val) => setForecastPageState(prev => ({ ...prev, gruActive: val }))}\r\n                gruParams={gruParams}\r\n                setGruParams={(params) => setForecastPageState(prev => ({ ...prev, gruParams: params }))}\r\n              />\r\n              <TransformerBlock\r\n                active={transformerActive}\r\n                setActive={(val) =>\r\n                  setForecastPageState((prev) => ({ ...prev, transformerActive: val }))\r\n                }\r\n                transformerParams={transformerParams}\r\n                setTransformerParams={(params) =>\r\n                  setForecastPageState((prev) => ({ ...prev, transformerParams: params }))\r\n                }\r\n              />\r\n\r\n            </Box>\r\n          </Slide>\r\n        </Box>\r\n        <Dialog open={csvDialogOpen} onClose={handleCloseCsvDialog} fullWidth maxWidth=\"md\">\r\n          <DialogTitle>Сохранить результаты</DialogTitle>\r\n          <DialogContent>\r\n            <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n              Выберите столбцы и формат файла:\r\n            </Typography>\r\n            <RadioGroup\r\n              row\r\n              value={fileType}\r\n              onChange={(e) =>\r\n                setForecastPageState((prev) => ({ ...prev, fileType: e.target.value }))\r\n              }\r\n              sx={{ mb: 2 }}\r\n            >\r\n              <FormControlLabel value=\"csv\" control={<Radio />} label=\"CSV\" />\r\n              <FormControlLabel value=\"xlsx\" control={<Radio />} label=\"XLSX\" />\r\n            </RadioGroup>\r\n            {!allPossibleCols.length ? (\r\n              <Typography>Нет доступных столбцов</Typography>\r\n            ) : (\r\n              <>\r\n                <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 2 }}>\r\n                  {allPossibleCols.map((col) => (\r\n                    <FormControlLabel\r\n                      key={col}\r\n                      control={\r\n                        <Checkbox\r\n                          checked={csvSelectedCols.includes(col)}\r\n                          onChange={(e) => {\r\n                            if (e.target.checked)\r\n                              setForecastPageState((prev) => ({\r\n                                ...prev,\r\n                                csvSelectedCols: [...prev.csvSelectedCols, col],\r\n                              }));\r\n                            else\r\n                              setForecastPageState((prev) => ({\r\n                                ...prev,\r\n                                csvSelectedCols: prev.csvSelectedCols.filter((c) => c !== col),\r\n                              }));\r\n                          }}\r\n                        />\r\n                      }\r\n                      label={col}\r\n                    />\r\n                  ))}\r\n                </Box>\r\n                {previewData && previewData.length > 0 && (\r\n                  <Box sx={{ mt: 2, overflowX: \"auto\" }}>\r\n                    <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\r\n                      Превью (первые 5 строк):\r\n                    </Typography>\r\n                    <table\r\n                      style={{\r\n                        borderCollapse: \"collapse\",\r\n                        width: \"100%\",\r\n                        color: \"#fff\",\r\n                        fontSize: \"0.85rem\",\r\n                      }}\r\n                    >\r\n                      <thead>\r\n                        <tr style={{ backgroundColor: \"#333\" }}>\r\n                          {csvSelectedCols.map((col) => (\r\n                            <th key={col} style={{ border: \"1px solid #555\", padding: \"4px\" }}>\r\n                              {col}\r\n                            </th>\r\n                          ))}\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {previewData.map((row, idx) => (\r\n                          <tr key={idx}>\r\n                            {csvSelectedCols.map((col) => (\r\n                              <td key={col} style={{ border: \"1px solid #555\", padding: \"4px\" }}>\r\n                                {row[col] !== undefined ? row[col] : \"\"}\r\n                              </td>\r\n                            ))}\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </Box>\r\n                )}\r\n              </>\r\n            )}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCloseCsvDialog}>Отмена</Button>\r\n            <Button variant=\"contained\" onClick={handleDownloadSelectedCols}>\r\n              Скачать\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Box>\r\n    </motion.div>\r\n  );\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/ForecastPage.jsx b/src/pages/ForecastPage.jsx
--- a/src/pages/ForecastPage.jsx	(revision 1ab158f4a2a0875eb7cb6ac0a269507765373344)
+++ b/src/pages/ForecastPage.jsx	(date 1739946529248)
@@ -27,6 +27,10 @@
   DialogTitle,
   DialogContent,
   DialogActions,
+  Accordion,
+  AccordionSummary,
+  AccordionDetails,
+  AccordionGroup,
   RadioGroup,
   ToggleButtonGroup,
   ToggleButton,
@@ -34,7 +38,9 @@
   Slide,
   Collapse,
   Chip,
-  MenuItem
+  MenuItem,
+  Tooltip,
+  Switch
 } from "@mui/material";
 import {
   ArrowBack as ArrowBackIcon,
@@ -43,6 +49,13 @@
   TrendingDown as TrendingDownIcon,
   ShowChart as ShowChartIcon,
   Percent as PercentIcon,
+  Tune as TuneIcon,
+  InfoOutlined as InfoOutlinedIcon,
+  Settings as SettingsIcon,
+  AccountTree as AccountTreeIcon,
+  Autorenew as AutorenewIcon,
+  CheckCircleOutline as CheckCircleOutlineIcon,
+  HighlightOff as HighlightOffIcon
 } from "@mui/icons-material";
 import { useNavigate, useLocation } from "react-router-dom";
 import { motion } from "framer-motion";
@@ -197,6 +210,84 @@
   return "#666";
 }
 
+const ParameterControl = memo(({
+  label,
+  name,
+  value,
+  min,
+  max,
+  step,
+  unit,
+  formatValue,
+  onChange
+}) => (
+  <Box>
+    <Box sx={{
+      display: 'flex',
+      justifyContent: 'space-between',
+      mb: 0.5
+    }}>
+      <Typography variant="body2" sx={{ color: '#aaa' }}>
+        {label}
+      </Typography>
+      <Typography variant="body2" sx={{ color: '#10A37F', fontWeight: 500 }}>
+        {formatValue ? formatValue(value) : value}{unit && ` ${unit}`}
+      </Typography>
+    </Box>
+    <Slider
+      value={value}
+      onChange={(_, val) => onChange(name, val)}
+      min={min}
+      max={max}
+      step={step}
+      sx={sliderStyles}
+    />
+  </Box>
+));
+
+const InfoTooltip = ({ title }) => (
+  <Tooltip title={title} arrow>
+    <InfoOutlinedIcon sx={{
+      fontSize: 16,
+      ml: 0.5,
+      verticalAlign: 'middle',
+      color: '#666',
+      '&:hover': { color: '#10A37F' }
+    }} />
+  </Tooltip>
+);
+
+// Стили
+const textFieldStyles = {
+  '& .MuiOutlinedInput-root': {
+    borderRadius: 2,
+    backgroundColor: '#363636',
+    '& fieldset': { borderColor: '#555' },
+    '&:hover fieldset': { borderColor: '#10A37F' },
+    '&.Mui-focused fieldset': { borderColor: '#10A37F' }
+  },
+  input: { color: '#fff', py: 1 },
+  '& .MuiSelect-select': { color: '#fff' },
+  '& .MuiSvgIcon-root': { color: '#fff' }
+};
+
+const sliderStyles = {
+  color: '#10A37F',
+  '& .MuiSlider-thumb': {
+    width: 14,
+    height: 14,
+    boxShadow: '0 2px 6px rgba(16, 163, 127, 0.4)',
+    '&:hover': { boxShadow: '0 0 0 8px rgba(16, 163, 127, 0.1)' }
+  },
+  '& .MuiSlider-valueLabel': {
+    backgroundColor: '#10A37F',
+    color: '#fff',
+    borderRadius: 2,
+    py: 0.5,
+    px: 1.5
+  }
+};
+
 const AnimatedMetricChip = memo(function AnimatedMetricChip({ label, value, type, icon }) {
   return (
     <Chip
@@ -687,7 +778,7 @@
               size="small"
               color="primary"
             >
-              {[1, 2, 3, 4, 6, 12, 24].map((val) => (
+              {[1, 2, 3, 4, 6, 12, 24, 52, 365].map((val) => (
                 <ToggleButton key={val} value={val} sx={{ color: "#fff", borderColor: "#10A37F" }}>
                   {val}
                 </ToggleButton>
@@ -756,76 +847,26 @@
     optimizer_type: "AdamW",
     criterion: "Huber",
   };
+
   const init = lstmParams || defaultParams;
-  const [localSeqLength, setLocalSeqLength] = useState(init.seq_length);
-  const [localLagPeriods, setLocalLagPeriods] = useState(init.lag_periods);
-  const [localWindowSizes, setLocalWindowSizes] = useState(init.window_sizes);
-  const [localNumLayers, setLocalNumLayers] = useState(init.num_layers);
-  const [localHiddenDim, setLocalHiddenDim] = useState(init.hidden_dim);
-  const [localDropout, setLocalDropout] = useState(init.dropout);
-  const [localBatchSize, setLocalBatchSize] = useState(init.batch_size);
-  const [localEpochs, setLocalEpochs] = useState(init.epochs);
-  const [localLearningRate, setLocalLearningRate] = useState(init.learning_rate);
-  const [localPatience, setLocalPatience] = useState(init.patience);
-  const [localDelta, setLocalDelta] = useState(init.delta);
-  const [localNSplits, setLocalNSplits] = useState(init.n_splits);
-  const [localUseAttention, setLocalUseAttention] = useState(init.use_attention);
-  const [localMCDropout, setLocalMCDropout] = useState(init.mc_dropout);
-  const [localMCSamples, setLocalMCSamples] = useState(init.mc_samples);
-  const [localOptimizer, setLocalOptimizer] = useState(init.optimizer_type || "AdamW");
-  const [localCriterion, setLocalCriterion] = useState(init.criterion || "Huber");
+  const [localParams, setLocalParams] = useState(init);
   const [paramsOpen, setParamsOpen] = useState(false);
-  const { setIsDirty } = useContext(DashboardContext);
+  const { setIsDirty } = useContext(DashboardContext); // Предполагается, что DashboardContext импортирован
+
+  const handleParamChange = useCallback((name, value) => {
+    setLocalParams(prev => ({ ...prev, [name]: value }));
+  }, []);
 
   const handleApply = useCallback(() => {
-    setLstmParams({
-      seq_length: localSeqLength,
-      lag_periods: localLagPeriods,
-      window_sizes: localWindowSizes.split(',').map(val => parseInt(val.trim())).filter(val => !isNaN(val)),
-      num_layers: localNumLayers,
-      hidden_dim: localHiddenDim,
-      dropout: localDropout,
-      batch_size: localBatchSize,
-      epochs: localEpochs,
-      learning_rate: localLearningRate,
-      patience: localPatience,
-      delta: localDelta,
-      n_splits: localNSplits,
-      use_attention: localUseAttention,
-      mc_dropout: localMCDropout,
-      mc_samples: localMCSamples,
-      optimizer_type: localOptimizer,
-      criterion: localCriterion,
-    });
+    const processedParams = {
+      ...localParams,
+      window_sizes: localParams.window_sizes.split(',').map(v => parseInt(v.trim())).filter(v => !isNaN(v))
+    };
+    setLstmParams(processedParams);
     setActive(true);
     setIsDirty(true);
-    setParamsOpen(false); // скрываем параметры при активации
-  }, [
-    localSeqLength,
-    localLagPeriods,
-    localWindowSizes,
-    localNumLayers,
-    localHiddenDim,
-    localDropout,
-    localBatchSize,
-    localEpochs,
-    localLearningRate,
-    localPatience,
-    localDelta,
-    localNSplits,
-    localUseAttention,
-    localMCDropout,
-    localMCSamples,
-    localOptimizer,
-    localCriterion,
-    setLstmParams,
-    setActive,
-    setIsDirty,
-    setParamsOpen,
-  ]);
-
-
-
+    setParamsOpen(false);
+  }, [localParams, setLstmParams, setActive, setIsDirty]);
 
   const handleCancel = useCallback(() => {
     setActive(false);
@@ -837,140 +878,361 @@
       setActive(false);
       setIsDirty(true);
     }
-    setParamsOpen((prev) => !prev);
+    setParamsOpen(prev => !prev);
   }, [paramsOpen, active, setActive, setIsDirty]);
 
   const borderColor = active ? "#10A37F" : "#FF4444";
 
   return (
-    <Paper sx={{ p: 2, mb: 2, border: `2px solid ${borderColor}`, borderRadius: 2 }}>
-      <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
-        <Typography variant="subtitle1" sx={{ fontWeight: "bold", color: "#fff" }}>
-          LSTM
-        </Typography>
-        <Button onClick={toggleParams} variant="text" sx={{ color: "#10A37F" }}>
-          {paramsOpen ? "Скрыть параметры" : "Показать параметры"}
+    <Paper sx={{
+      pl: 2,
+      pb: 1,
+      pr: 2,
+      pt: 2,
+      mb: 2,
+      border: `2px solid ${borderColor}`,
+      borderRadius: 2,
+
+
+      boxShadow: '0 4px 20px rgba(0,0,0,0.2)',
+      // overflow: 'auto' // Чтобы внутреннее содержимое не выходило за рамки
+    }}>
+      <Box sx={{
+        display: "flex",
+        justifyContent: "space-between",
+        alignItems: "center",
+        mb: 1,
+      }}>
+        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
+          <Typography variant="h7" sx={{
+            fontWeight: 600,
+            color: "#fff",
+            textShadow: '0 2px 4px rgba(0,0,0,0.3)'
+          }}>
+            LSTM
+          </Typography>
+        </Box>
+        <Button
+          onClick={toggleParams}
+          variant="contained"
+          sx={{
+            bgcolor: paramsOpen ? '#10A37F' : '#404040',
+            '&:hover': { bgcolor: paramsOpen ? '#0d8a6d' : '#4d4d4d' },
+            borderRadius: 2,
+            px: 3,
+            py: 0.5
+          }}
+        >
+          {paramsOpen ? "Свернуть" : "Настроить"}
         </Button>
       </Box>
+
       <Collapse in={paramsOpen}>
-        <Box
-          sx={{
-            mt: 1,
-            display: 'grid',
-            gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))',
-            gap: 2,
-          }}
-        >
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Длина последовательности (seq_length)</Typography>
-            <Slider value={localSeqLength} onChange={(e, val) => setLocalSeqLength(val)} min={1} max={50} step={1} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Периоды задержки (lag_periods)</Typography>
-            <Slider value={localLagPeriods} onChange={(e, val) => setLocalLagPeriods(val)} min={1} max={50} step={1} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Размеры окон (window_sizes, через запятую)</Typography>
-            <TextField
-              value={localWindowSizes}
-              onChange={(e) => setLocalWindowSizes(e.target.value)}
-              variant="outlined"
-              fullWidth
-              sx={{ backgroundColor: "#2c2c2c", input: { color: "#fff" } }}
-            />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Число слоёв (num_layers)</Typography>
-            <Slider value={localNumLayers} onChange={(e, val) => setLocalNumLayers(val)} min={1} max={4} step={1} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Размер скрытого состояния (hidden_dim)</Typography>
-            <Slider value={localHiddenDim} onChange={(e, val) => setLocalHiddenDim(val)} min={16} max={512} step={16} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Dropout</Typography>
-            <Slider value={localDropout} onChange={(e, val) => setLocalDropout(val)} min={0} max={1} step={0.05} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Batch Size</Typography>
-            <Slider value={localBatchSize} onChange={(e, val) => setLocalBatchSize(val)} min={8} max={128} step={8} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Эпохи (epochs)</Typography>
-            <Slider value={localEpochs} onChange={(e, val) => setLocalEpochs(val)} min={10} max={500} step={10} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Learning Rate</Typography>
-            <Slider value={localLearningRate} onChange={(e, val) => setLocalLearningRate(val)} min={0.0001} max={0.01} step={0.0001} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Patience</Typography>
-            <Slider value={localPatience} onChange={(e, val) => setLocalPatience(val)} min={1} max={50} step={1} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Delta</Typography>
-            <Slider value={localDelta} onChange={(e, val) => setLocalDelta(val)} min={0} max={0.01} step={0.0001} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>n_splits</Typography>
-            <Slider value={localNSplits} onChange={(e, val) => setLocalNSplits(val)} min={2} max={10} step={1} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box sx={{ display: "flex", alignItems: "center" }}>
-            <FormControlLabel
-              control={<Checkbox checked={localUseAttention} onChange={(e) => setLocalUseAttention(e.target.checked)} sx={{ color: "#10A37F" }} />}
-              label="Использовать внимание"
-            />
-          </Box>
-          <Box sx={{ display: "flex", alignItems: "center" }}>
-            <FormControlLabel
-              control={<Checkbox checked={localMCDropout} onChange={(e) => setLocalMCDropout(e.target.checked)} sx={{ color: "#10A37F" }} />}
-              label="MC-Dropout"
-            />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>MC-Samples</Typography>
-            <Slider value={localMCSamples} onChange={(e, val) => setLocalMCSamples(val)} min={1} max={200} step={1} valueLabelDisplay="auto" sx={{ color: "#10A37F" }} />
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Тип оптимизатора</Typography>
-            <TextField
-              select
-              fullWidth
-              variant="outlined"
-              value={localOptimizer}
-              onChange={(e) => setLocalOptimizer(e.target.value)}
-              sx={{ backgroundColor: "#2c2c2c", input: { color: "#fff" } }}
-            >
-              <MenuItem value="AdamW">AdamW</MenuItem>
-              <MenuItem value="Adam">Adam</MenuItem>
-              <MenuItem value="SGD">SGD</MenuItem>
-              <MenuItem value="RMSprop">RMSprop</MenuItem>
-            </TextField>
-          </Box>
-          <Box>
-            <Typography variant="body2" sx={{ color: "#fff" }}>Критерий</Typography>
-            <TextField
-              select
-              fullWidth
-              variant="outlined"
-              value={localCriterion}
-              onChange={(e) => setLocalCriterion(e.target.value)}
-              sx={{ backgroundColor: "#2c2c2c", input: { color: "#fff" } }}
-            >
-              <MenuItem value="MSE">MSE</MenuItem>
-              <MenuItem value="MAE">MAE</MenuItem>
-              <MenuItem value="Huber">Huber</MenuItem>
-            </TextField>
+        <Box sx={{
+          mt: 1,
+          display: 'grid',
+          gridTemplateColumns: { xs: '1fr', sm: 'repeat(2, 1fr)', lg: 'repeat(3, 1fr)' },
+
+          p: 1,
+          borderRadius: 2,
+
+          width: '100%',
+          overflow: 'hidden' // Ограничиваем содержимое внутри блока
+        }}>
+          {/* Обёртка для аккордеонов */}
+          <Box sx={{ gridColumn: '1 / -1' }}>
+            {/* Основные параметры */}
+            <Accordion defaultExpanded>
+              <AccordionSummary>
+                <SettingsIcon sx={{ mr: 1, color: '#10A37F' }} />
+                <Typography>Основные параметры</Typography>
+              </AccordionSummary>
+              <AccordionDetails>
+                <Box sx={{
+                  display: 'grid',
+                  gap: 2,
+
+                  gridTemplateColumns: 'repeat(auto-fit, minmax(190px, 1fr))',
+                  overflow: 'hidden'
+                }}>
+                  <ParameterControl
+                    label="Длина последовательности"
+                    name="seq_length"
+                    value={localParams.seq_length}
+                    min={1}
+                    max={50}
+                    onChange={handleParamChange}
+                    unit="шагов"
+                  />
+                  <ParameterControl
+                    label="Периоды задержки"
+                    name="lag_periods"
+                    value={localParams.lag_periods}
+                    min={1}
+                    max={50}
+                    onChange={handleParamChange}
+                    unit="периодов"
+                  />
+                  <Box sx={{ width: '100%', overflow: 'hidden' }}>
+                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
+                      <Typography variant="body2" sx={{ color: '#aaa' }}>
+                        Размеры окон
+                      </Typography>
+                      <InfoTooltip title="Введите значения через запятую (например: 3,6,12)" />
+                    </Box>
+                    <TextField
+                      value={localParams.window_sizes}
+                      onChange={(e) => handleParamChange('window_sizes', e.target.value)}
+                      variant="outlined"
+                      fullWidth
+                      sx={textFieldStyles}
+                      placeholder="3,6,12"
+                    />
+                  </Box>
+                </Box>
+              </AccordionDetails>
+            </Accordion>
+
+            {/* Архитектура */}
+            <Accordion>
+              <AccordionSummary>
+                <AccountTreeIcon sx={{ mr: 1, color: '#10A37F' }} />
+                <Typography>Архитектура</Typography>
+              </AccordionSummary>
+              <AccordionDetails>
+                <Box sx={{
+                  display: 'grid',
+                  gap: 2,
+                  gridTemplateColumns: 'repeat(auto-fit, minmax(190px, 1fr))',
+                  overflow: 'hidden'
+                }}>
+                  <ParameterControl
+                    label="Количество слоёв"
+                    name="num_layers"
+                    value={localParams.num_layers}
+                    min={1}
+                    max={4}
+                    step={1}
+                    onChange={handleParamChange}
+                  />
+                  <ParameterControl
+                    label="Скрытая размерность"
+                    name="hidden_dim"
+                    value={localParams.hidden_dim}
+                    min={16}
+                    max={512}
+                    step={16}
+                    onChange={handleParamChange}
+                    unit="нейронов"
+                  />
+                  <ParameterControl
+                    label="Dropout"
+                    name="dropout"
+                    value={localParams.dropout}
+                    min={0}
+                    max={1}
+                    step={0.05}
+                    onChange={handleParamChange}
+                    formatValue={(v) => v.toFixed(2)}
+                  />
+                  <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
+                    <Switch
+                      checked={localParams.use_attention}
+                      onChange={(e) => handleParamChange('use_attention', e.target.checked)}
+                      color="success"
+                    />
+                    <Box>
+                      <Typography>Механизм внимания</Typography>
+                      <Typography variant="caption" sx={{ color: '#aaa' }}>
+                        {localParams.use_attention ? 'Активирован' : 'Отключен'}
+                      </Typography>
+                    </Box>
+                  </Box>
+                </Box>
+              </AccordionDetails>
+            </Accordion>
+
+            {/* Оптимизация и обучение */}
+            <Accordion>
+              <AccordionSummary>
+                <AutorenewIcon sx={{ mr: 1, color: '#10A37F' }} />
+                <Typography>Оптимизация и обучение</Typography>
+              </AccordionSummary>
+              <AccordionDetails>
+                <Box sx={{
+                  display: 'grid',
+                  gap: 2,
+                  gridTemplateColumns: 'repeat(auto-fit, minmax(190px, 1fr))',
+                  overflow: 'hidden'
+                }}>
+                  <ParameterControl
+                    label="Batch Size"
+                    name="batch_size"
+                    value={localParams.batch_size}
+                    min={8}
+                    max={128}
+                    step={8}
+                    onChange={handleParamChange}
+                  />
+                  <ParameterControl
+                    label="Эпохи обучения"
+                    name="epochs"
+                    value={localParams.epochs}
+                    min={10}
+                    max={500}
+                    step={10}
+                    onChange={handleParamChange}
+                  />
+                  <ParameterControl
+                    label="Learning Rate"
+                    name="learning_rate"
+                    value={localParams.learning_rate}
+                    min={0.0001}
+                    max={0.01}
+                    step={0.0001}
+                    onChange={handleParamChange}
+                    formatValue={(v) => v.toFixed(4)}
+                  />
+                  <Box sx={{ width: '100%', overflow: 'hidden' }}>
+                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
+                      <Typography variant="body2" sx={{ color: '#aaa' }}>
+                        Оптимизатор
+                      </Typography>
+                      <InfoTooltip title="Выберите алгоритм оптимизации" />
+                    </Box>
+                    <TextField
+                      select
+                      fullWidth
+                      value={localParams.optimizer_type}
+                      onChange={(e) => handleParamChange('optimizer_type', e.target.value)}
+                      sx={textFieldStyles}
+                    >
+                      {['AdamW', 'Adam', 'SGD', 'RMSprop'].map(opt => (
+                        <MenuItem key={opt} value={opt}>{opt}</MenuItem>
+                      ))}
+                    </TextField>
+                  </Box>
+                  <Box sx={{ width: '100%', overflow: 'hidden' }}>
+                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
+                      <Typography variant="body2" sx={{ color: '#aaa' }}>
+                        Функция потерь
+                      </Typography>
+                      <InfoTooltip title="Выберите критерий для расчета ошибки" />
+                    </Box>
+                    <TextField
+                      select
+                      fullWidth
+                      value={localParams.criterion}
+                      onChange={(e) => handleParamChange('criterion', e.target.value)}
+                      sx={textFieldStyles}
+                    >
+                      {['MSE', 'MAE', 'Huber'].map(crit => (
+                        <MenuItem key={crit} value={crit}>{crit}</MenuItem>
+                      ))}
+                    </TextField>
+                  </Box>
+                </Box>
+              </AccordionDetails>
+            </Accordion>
+
+            {/* Дополнительные настройки */}
+            <Accordion>
+              <AccordionSummary>
+                <SettingsIcon sx={{ mr: 1, color: '#10A37F' }} />
+                <Typography>Дополнительные настройки</Typography>
+              </AccordionSummary>
+              <AccordionDetails>
+                <Box sx={{
+                  display: 'grid',
+                  gap: 2,
+                  gridTemplateColumns: 'repeat(auto-fit, minmax(190px, 1fr))',
+                  overflow: 'hidden',
+                }}>
+                  <ParameterControl
+                    label="Patience"
+                    name="patience"
+                    value={localParams.patience}
+                    min={1}
+                    max={50}
+                    step={1}
+                    onChange={handleParamChange}
+                  />
+                  <ParameterControl
+                    label="Delta"
+                    name="delta"
+                    value={localParams.delta}
+                    min={0}
+                    max={0.01}
+                    step={0.0001}
+                    onChange={handleParamChange}
+                    formatValue={(v) => v.toFixed(4)}
+                  />
+                  <ParameterControl
+                    label="Количество фолдов"
+                    name="n_splits"
+                    value={localParams.n_splits}
+                    min={2}
+                    max={10}
+                    step={1}
+                    onChange={handleParamChange}
+                  />
+                  <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
+                    <Switch
+                      checked={localParams.mc_dropout}
+                      onChange={(e) => handleParamChange('mc_dropout', e.target.checked)}
+                      color="success"
+                    />
+                    <Box>
+                      <Typography>MC-Dropout</Typography>
+                      <Typography variant="caption" sx={{ color: '#aaa' }}>
+                        {localParams.mc_dropout ? 'Активирован' : 'Отключен'}
+                      </Typography>
+                    </Box>
+                  </Box>
+                  {localParams.mc_dropout && (
+                    <ParameterControl
+                      label="MC-Сэмплов"
+                      name="mc_samples"
+                      value={localParams.mc_samples}
+                      min={1}
+                      max={200}
+                      step={1}
+                      onChange={handleParamChange}
+                    />
+                  )}
+                </Box>
+              </AccordionDetails>
+            </Accordion>
           </Box>
         </Box>
       </Collapse>
-      <Box sx={{ display: "flex", justifyContent: "flex-end", gap: 1, mt: 2 }}>
+<Box sx={{ display: "flex", justifyContent: "flex-end",mt: 1 }}>
         {active ? (
-          <Button variant="outlined" startIcon={<CloseIcon />} onClick={handleCancel} sx={{ borderColor: "#FF4444", color: "#FF4444" }}>
+          <Button
+            startIcon={<CloseIcon />}
+            variant="outlined"
+            onClick={handleCancel}
+            sx={{
+              mr: 1,
+              borderColor: "#FF4444",
+              color: "#FF4444",
+              "&:hover": { borderColor: "#FF4444", backgroundColor: "#ff44441a" },
+            }}
+          >
             Отключить
           </Button>
         ) : (
-          <Button variant="outlined" startIcon={<CheckIcon />} onClick={handleApply} sx={{ borderColor: "#10A37F", color: "#10A37F" }}>
+          <Button
+            variant="outlined"
+            startIcon={<CheckIcon />}
+            onClick={handleApply}
+            sx={{
+              mr: 1,
+              borderColor: "#10A37F",
+              color: "#10A37F",
+              "&:hover": { borderColor: "#10A37F", backgroundColor: "#10A37F1a" },
+            }}
+          >
             Активировать
           </Button>
         )}
Index: src/pages/Dashboard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  CircularProgress,\r\n  Chip,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport {\r\n  TbUpload,\r\n  TbX,\r\n  TbChartLine,\r\n  TbFilter,\r\n  TbArrowRight,\r\n  TbInfoCircle,\r\n} from \"react-icons/tb\";\r\nimport FilterPanel from \"../components/FilterPanel\";\r\nimport TableDisplay from \"../components/TableDisplay\";\r\nimport { FloatingLinesBackground } from \"../components/AnimatedBackground\";\r\nimport { DashboardContext } from \"../context/DashboardContext\";\r\nimport { HistoryContext } from \"../context/HistoryContext\";\r\nimport axios from \"axios\";\r\nimport {Canvas} from \"@react-three/fiber\";\r\nimport {ParticleBackground} from \"../components/home/ParticleBackground\";\r\n\r\nconst Dashboard = () => {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const {\r\n    originalData,\r\n    setOriginalData,\r\n    filters,\r\n    setFilters,\r\n    sortColumn,\r\n    setSortColumn,\r\n    sortDirection,\r\n    setSortDirection,\r\n    filteredData,\r\n    setFilteredData,\r\n    tableData,\r\n    setTableData,\r\n    columns,\r\n    setColumns,\r\n    selectedColumns,\r\n    setSelectedColumns,\r\n    setUploadedFile,\r\n    uploadedFileName,\r\n    setUploadedFileName,\r\n    currentSessionId,\r\n    setCurrentSessionId,\r\n    resetDashboardState,\r\n    secondPageState,\r\n    preprocessingSettings,\r\n    forecastResults,\r\n    tablePage,\r\n    tableRowsPerPage,\r\n  } = useContext(DashboardContext);\r\n  const { addHistoryItem } = useContext(HistoryContext);\r\n\r\n  const [file, setFile] = useState(null);\r\n  const [, setMessage] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [stats, setStats] = useState(null);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFile = event.target.files?.[0];\r\n    if (selectedFile) {\r\n      setFile(selectedFile);\r\n      setUploadedFile(selectedFile);\r\n      setUploadedFileName(selectedFile.name);\r\n      setMessage(\"\");\r\n      // При загрузке нового файла новая сессия активна\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!file) {\r\n      setMessage(\"Please select a file first\");\r\n      return;\r\n    }\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post(\r\n        \"http://localhost:8000/api/upload\",\r\n        formData,\r\n        { withCredentials: true }\r\n      );\r\n      const receivedData = response.data.full_data || [];\r\n      const columnNames = response.data.columns || [];\r\n      setOriginalData(receivedData);\r\n      setColumns(columnNames);\r\n      addHistoryItem(file.name);\r\n      analyzeData(receivedData);\r\n\r\n      // Формируем объект состояния для новой сессии, включая все необходимые поля\r\n      const sessionState = {\r\n        originalData: receivedData,\r\n        columns: columnNames,\r\n        filters,\r\n        selectedColumns,\r\n        uploadedFileName: file.name,\r\n        sortColumn,\r\n        sortDirection,\r\n        preprocessingSettings,\r\n        forecastResults,\r\n        secondPageState,\r\n        tablePage,\r\n        tableRowsPerPage,\r\n      };\r\n      const sessionResponse = await axios.post(\r\n        \"http://localhost:8000/session\",\r\n        { state: sessionState },\r\n        { withCredentials: true }\r\n      );\r\n      setCurrentSessionId(sessionResponse.data.id);\r\n    } catch (error) {\r\n      setMessage(\"Error uploading file\");\r\n      console.error(\"Upload error:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const analyzeData = (data) => {\r\n    if (data.length === 0) return;\r\n    const numericColumns = columns.filter((col) =>\r\n      data.some((row) => !isNaN(parseFloat(row[col])))\r\n    );\r\n    const computedStats = numericColumns.reduce((acc, col) => {\r\n      const values = data\r\n        .map((row) => parseFloat(row[col]))\r\n        .filter((v) => !isNaN(v));\r\n      acc[col] = {\r\n        min: Math.min(...values),\r\n        max: Math.max(...values),\r\n        avg: values.reduce((a, b) => a + b, 0) / values.length,\r\n      };\r\n      return acc;\r\n    }, {});\r\n    setStats(computedStats);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    resetDashboardState();\r\n    setFile(null);\r\n    setMessage(\"\");\r\n    sessionStorage.removeItem(\"forecastPageState\");\r\n    const fileInput = document.getElementById(\"upload-file\");\r\n    if (fileInput) fileInput.value = \"\";\r\n  };\r\n\r\n  const handleConfirmSelection = () => {\r\n    if (Array.isArray(selectedColumns) && selectedColumns.length === 2) {\r\n      navigate(\"/preprocessing\", {\r\n        state: { selectedColumns, filteredData, filters },\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSortAsc = (column) => {\r\n    setSortColumn(column);\r\n    setSortDirection(\"asc\");\r\n  };\r\n\r\n  const handleSortDesc = (column) => {\r\n    setSortColumn(column);\r\n    setSortDirection(\"desc\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    let data = [...originalData];\r\n    Object.entries(filters).forEach(([column, value]) => {\r\n      if (value) data = data.filter((row) => row[column] === value);\r\n    });\r\n    if (sortColumn && sortDirection) {\r\n      data.sort((a, b) => {\r\n        const valA = a[sortColumn];\r\n        const valB = b[sortColumn];\r\n        if (!isNaN(parseFloat(valA)) && !isNaN(parseFloat(valB))) {\r\n          return sortDirection === \"asc\"\r\n            ? parseFloat(valA) - parseFloat(valB)\r\n            : parseFloat(valB) - parseFloat(valA);\r\n        }\r\n        return sortDirection === \"asc\"\r\n          ? valA.toString().localeCompare(valB.toString())\r\n          : valB.toString().localeCompare(valA.toString());\r\n      });\r\n    }\r\n    setFilteredData(data);\r\n    setTableData(data);\r\n  }, [originalData, filters, sortColumn, sortDirection]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minHeight: \"100vh\",\r\n        position: \"relative\",\r\n        overflow: \"hidden\",\r\n        p: 4,\r\n        background: theme.palette.background.default,\r\n      }}\r\n    >\r\n            <Canvas camera={{ position: [0, 0, 1] }} style={{ position: 'fixed', top: 0, left: 0 }}>\r\n        <ParticleBackground />\r\n      </Canvas>\r\n      <Grid container spacing={4} sx={{ position: \"relative\", zIndex: 1 }}>\r\n        {/* File Upload Section */}\r\n        <Grid item xs={12}>\r\n          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>\r\n            <Box\r\n              sx={{\r\n                background: \"rgba(255,255,255,0.05)\",\r\n                borderRadius: \"20px\",\r\n                p: 4,\r\n                border: \"1px solid rgba(255,255,255,0.1)\",\r\n                backdropFilter: \"blur(12px)\",\r\n                boxShadow: \"0 8px 32px rgba(0,0,0,0.1)\",\r\n              }}\r\n            >\r\n              <Box sx={{ display: \"flex\", gap: 2, alignItems: \"center\", mb: 3 }}>\r\n                <TbUpload size={32} color={theme.palette.primary.main} />\r\n                <Typography\r\n                  variant=\"h4\"\r\n                  sx={{\r\n                    fontWeight: 600,\r\n                    background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, #00ff88 100%)`,\r\n                    WebkitBackgroundClip: \"text\",\r\n                    WebkitTextFillColor: \"transparent\",\r\n                  }}\r\n                >\r\n                  Загркзка и обработка данных\r\n                </Typography>\r\n              </Box>\r\n              <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n                <input type=\"file\" accept=\".csv\" onChange={handleFileChange} id=\"upload-file\" hidden />\r\n                <Button\r\n                  component=\"label\"\r\n                  variant=\"contained\"\r\n                  htmlFor=\"upload-file\"\r\n                  startIcon={<TbUpload />}\r\n                  sx={{\r\n                    py: 1.5,\r\n                    px: 4,\r\n                    borderRadius: \"12px\",\r\n                    textTransform: \"none\",\r\n                    fontSize: \"1rem\",\r\n                  }}\r\n                >\r\n                  Выберите файл\r\n                </Button>\r\n                {file && (\r\n                  <AnimatePresence>\r\n                    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>\r\n                      <Chip\r\n                        label={file.name}\r\n                        onDelete={handleReset}\r\n                        deleteIcon={<TbX />}\r\n                        sx={{\r\n                          bgcolor: \"rgba(16,163,127,0.15)\",\r\n                          color: theme.palette.primary.main,\r\n                          fontWeight: 500,\r\n                        }}\r\n                      />\r\n                    </motion.div>\r\n                  </AnimatePresence>\r\n                )}\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={handleUpload}\r\n                  disabled={!file || loading}\r\n                  sx={{\r\n                    px: 4,\r\n                    py: 1.5,\r\n                    borderRadius: \"12px\",\r\n                    bgcolor: theme.palette.primary.main,\r\n                    \"&:disabled\": { bgcolor: \"rgba(255,255,255,0.1)\" },\r\n                  }}\r\n                >\r\n                  {loading ? <CircularProgress size={24} sx={{ color: \"#fff\" }} /> : \"Статистика данных\"}\r\n                </Button>\r\n              </Box>\r\n              {stats && (\r\n                <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.2 }}>\r\n                  <Box sx={{ mt: 4, display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n                    {Object.entries(stats).map(([col, values]) => (\r\n                      <Box key={col} sx={{ bgcolor: \"rgba(16,163,127,0.1)\", p: 2, borderRadius: \"12px\", minWidth: \"200px\" }}>\r\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 600, color: theme.palette.primary.main }}>\r\n                          {col}\r\n                        </Typography>\r\n                        <Box sx={{ mt: 1 }}>\r\n                          <Typography>Min: {values.min.toFixed(2)}</Typography>\r\n                          <Typography>Max: {values.max.toFixed(2)}</Typography>\r\n                          <Typography>Avg: {values.avg.toFixed(2)}</Typography>\r\n                        </Box>\r\n                      </Box>\r\n                    ))}\r\n                  </Box>\r\n                </motion.div>\r\n              )}\r\n            </Box>\r\n          </motion.div>\r\n        </Grid>\r\n  \r\n        {/* Filters & Table Section */}\r\n        <Grid item xs={12} md={3}>\r\n          <motion.div initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: 0.3 }}>\r\n            <Box sx={{ p: 3, bgcolor: \"rgba(255,255,255,0.05)\", borderRadius: \"16px\", border: \"1px solid rgba(255,255,255,0.1)\", backdropFilter: \"blur(12px)\" }}>\r\n              <Box sx={{ display: \"flex\", alignItems: \"center\", mb: 3, gap: 1 }}>\r\n                <TbFilter size={24} color={theme.palette.primary.main} />\r\n                <Typography variant=\"h6\" sx={{ fontWeight: 500 }}>Фильтры</Typography>\r\n              </Box>\r\n              <FilterPanel originalData={originalData} columns={columns} filters={filters} updateFilters={setFilters} />\r\n            </Box>\r\n          </motion.div>\r\n        </Grid>\r\n  \r\n        <Grid item xs={12} md={9}>\r\n          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.4 }}>\r\n            <Box sx={{ bgcolor: \"rgba(255,255,255,0.05)\", borderRadius: \"16px\", border: \"1px solid rgba(255,255,255,0.1)\", backdropFilter: \"blur(12px)\", p: 3 }}>\r\n              <TableDisplay\r\n                data={tableData}\r\n                sortColumn={sortColumn}\r\n                sortDirection={sortDirection}\r\n                onSortAsc={handleSortAsc}\r\n                onSortDesc={handleSortDesc}\r\n                onColumnSelect={(value) => {\r\n                  setSelectedColumns((prev) => {\r\n                    if (prev.includes(value)) return prev.filter((col) => col !== value);\r\n                    if (prev.length < 2) return [...prev, value];\r\n                    return prev;\r\n                  });\r\n                }}\r\n                selectedColumns={selectedColumns}\r\n              />\r\n              {Array.isArray(selectedColumns) && selectedColumns.length > 0 && (\r\n                <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.3 }}>\r\n                  <Box sx={{ mt: 4, p: 3, bgcolor: \"rgba(16,163,127,0.1)\", borderRadius: \"12px\", border: \"1px solid rgba(16,163,127,0.3)\" }}>\r\n                    <Typography variant=\"h6\" sx={{ mb: 2, display: \"flex\", alignItems: \"center\", gap: 1, color: theme.palette.primary.main }}>\r\n                      <TbChartLine size={24} />\r\n                      Выбранные признаки\r\n                    </Typography>\r\n                    <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n                      {selectedColumns.map((col) => (\r\n                        <Chip\r\n                          key={col}\r\n                          label={col}\r\n                          onDelete={() => {\r\n                            setSelectedColumns((prev) => prev.filter((c) => c !== col));\r\n                          }}\r\n                          sx={{\r\n                            bgcolor: \"rgba(16,163,127,0.2)\",\r\n                            color: \"#fff\",\r\n                            fontSize: \"0.9rem\",\r\n                            py: 1.5,\r\n                            px: 2,\r\n                          }}\r\n                        />\r\n                      ))}\r\n                    </Box>\r\n                    <Button\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      onClick={handleConfirmSelection}\r\n                      disabled={selectedColumns.length !== 2}\r\n                      endIcon={<TbArrowRight />}\r\n                      sx={{\r\n                        mt: 3,\r\n                        py: 1.5,\r\n                        borderRadius: \"12px\",\r\n                        fontSize: \"1rem\",\r\n                        bgcolor: theme.palette.primary.main,\r\n                        \"&:disabled\": { bgcolor: \"rgba(255,255,255,0.1)\" },\r\n                      }}\r\n                    >\r\n                      Продолжить анализ\r\n                    </Button>\r\n                    {selectedColumns.length !== 2 && (\r\n                      <Typography variant=\"body2\" sx={{ mt: 1, display: \"flex\", alignItems: \"center\", gap: 1, color: \"text.secondary\" }}>\r\n                        <TbInfoCircle />\r\n                        Выберите временную и таргетную переменную\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                </motion.div>\r\n              )}\r\n            </Box>\r\n          </motion.div>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/Dashboard.jsx b/src/pages/Dashboard.jsx
--- a/src/pages/Dashboard.jsx	(revision 1ab158f4a2a0875eb7cb6ac0a269507765373344)
+++ b/src/pages/Dashboard.jsx	(date 1739922872990)
@@ -73,7 +73,6 @@
       setUploadedFile(selectedFile);
       setUploadedFileName(selectedFile.name);
       setMessage("");
-      // При загрузке нового файла новая сессия активна
     }
   };
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"87aacc28-dd70-4bb9-b83a-40324653cc6e\" name=\"Changes\" comment=\"version 8.3 Transformer forecast\">\r\n      <change beforePath=\"$PROJECT_DIR$/../backend/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../backend/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../backend/app.db\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../backend/app.db\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../backend/forecast/gru_forecast.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../backend/forecast/gru_forecast.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/pages/ForecastPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/pages/ForecastPage.jsx\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$/..\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;DenisML51&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/DenisML51/Forecast_ML_Project&quot;,\r\n    &quot;accountId&quot;: &quot;9a518a06-d3cc-424d-a563-fca9a8b4a58f&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2sz0HaBDTXRUYzSD7qP8w7tRTGk\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"design\",\r\n    \"last_opened_file_path\": \"C:/Coding/Forecast_ML_Project/Forecast_ML_Project\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"preferences.lookFeel\",\r\n    \"ts.external.directory.path\": \"C:\\\\Program Files\\\\JetBrains\\\\PyCharm 2024.2.3\\\\plugins\\\\javascript-plugin\\\\jsLanguageServicesImpl\\\\external\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Rusinov.DS\\PycharmProjects\\project\\Forecast_ML_Project\\frontend\\src\\pages\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-deb605915726-JavaScript-PY-243.22562.180\" />\r\n        <option value=\"bundled-python-sdk-85c76a3b01b3-9a18a617cbe4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.22562.180\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"87aacc28-dd70-4bb9-b83a-40324653cc6e\" name=\"Changes\" comment=\"\" />\r\n      <created>1739443008537</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1739443008537</updated>\r\n      <workItem from=\"1739443009562\" duration=\"1973000\" />\r\n      <workItem from=\"1739445448905\" duration=\"625000\" />\r\n      <workItem from=\"1739448462531\" duration=\"10144000\" />\r\n      <workItem from=\"1739529821276\" duration=\"23232000\" />\r\n      <workItem from=\"1739748798488\" duration=\"17825000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"version 7 User Cabinet and User Sessions\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1739762520645</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1739762520645</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"new global design 2\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1739769839211</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1739769839211</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"version 7.9 header design new\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1739836029596</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1739836029596</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"version 8.1 LSTM forecast\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1739849940327</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1739849940327</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"version 8.2 GRU forecast\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1739852927224</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1739852927224</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"version 8.3 Transformer forecast\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1739858311783</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1739858311783</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"7\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"version 7 User Cabinet and User Sessions\" />\r\n    <MESSAGE value=\"new global design 2\" />\r\n    <MESSAGE value=\"version 7.9 header design new\" />\r\n    <MESSAGE value=\"version 8.1 LSTM forecast\" />\r\n    <MESSAGE value=\"version 8.2 GRU forecast\" />\r\n    <MESSAGE value=\"version 8.3 Transformer forecast\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"version 8.3 Transformer forecast\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1ab158f4a2a0875eb7cb6ac0a269507765373344)
+++ b/.idea/workspace.xml	(date 1739943562649)
@@ -4,11 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="87aacc28-dd70-4bb9-b83a-40324653cc6e" name="Changes" comment="version 8.3 Transformer forecast">
+    <list default="true" id="87aacc28-dd70-4bb9-b83a-40324653cc6e" name="Changes" comment="version 8.4 Design Improvements">
       <change beforePath="$PROJECT_DIR$/../backend/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../backend/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../backend/app.db" beforeDir="false" afterPath="$PROJECT_DIR$/../backend/app.db" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../backend/forecast/gru_forecast.py" beforeDir="false" afterPath="$PROJECT_DIR$/../backend/forecast/gru_forecast.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/context/AuthContext.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/context/AuthContext.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/pages/Dashboard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/pages/Dashboard.jsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/pages/ForecastPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/pages/ForecastPage.jsx" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -19,7 +20,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$/.." value="main" />
+        <entry key="$PROJECT_DIR$/.." value="design" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
@@ -48,7 +49,7 @@
   "keyToString": {
     "ASKED_SHARE_PROJECT_CONFIGURATION_FILES": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "design",
+    "git-widget-placeholder": "design1",
     "last_opened_file_path": "C:/Coding/Forecast_ML_Project/Forecast_ML_Project",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
@@ -135,7 +136,15 @@
       <option name="project" value="LOCAL" />
       <updated>1739858311783</updated>
     </task>
-    <option name="localTasksCounter" value="7" />
+    <task id="LOCAL-00007" summary="version 8.4 Design Improvements">
+      <option name="closed" value="true" />
+      <created>1739859036241</created>
+      <option name="number" value="00007" />
+      <option name="presentableId" value="LOCAL-00007" />
+      <option name="project" value="LOCAL" />
+      <updated>1739859036241</updated>
+    </task>
+    <option name="localTasksCounter" value="8" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -159,6 +168,7 @@
     <MESSAGE value="version 8.1 LSTM forecast" />
     <MESSAGE value="version 8.2 GRU forecast" />
     <MESSAGE value="version 8.3 Transformer forecast" />
-    <option name="LAST_COMMIT_MESSAGE" value="version 8.3 Transformer forecast" />
+    <MESSAGE value="version 8.4 Design Improvements" />
+    <option name="LAST_COMMIT_MESSAGE" value="version 8.4 Design Improvements" />
   </component>
 </project>
\ No newline at end of file
Index: ../backend/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2e1a8637-1a7f-4b70-a5e1-9d7aa5d3a7d1\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app.db\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app.db\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/forecast/gru_forecast.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/forecast/gru_forecast.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../frontend/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../frontend/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../frontend/src/pages/ForecastPage.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../frontend/src/pages/ForecastPage.jsx\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;DenisML51&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/DenisML51/Forecast_ML_Project&quot;,\r\n    &quot;accountId&quot;: &quot;9a518a06-d3cc-424d-a563-fca9a8b4a58f&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2sz0FM6VlVk3fh2jR9hk80iabjB\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"Python.lstm_forecast.executor\": \"Run\",\r\n    \"Python.test.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"design\",\r\n    \"last_opened_file_path\": \"C:/Users/Rusinov.DS/PycharmProjects/project/Forecast_ML_Project\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Rusinov.DS\\PycharmProjects\\project\\Forecast_ML_Project\\backend\\forecast\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.test\">\r\n    <configuration name=\"lstm_forecast\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"backend\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/forecast\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/forecast/lstm_forecast.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"test\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"backend\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/forecast\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/forecast/test.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.test\" />\r\n        <item itemvalue=\"Python.lstm_forecast\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-PY-242.23339.19\" />\r\n        <option value=\"bundled-python-sdk-0029f7779945-399fe30bd8c1-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.23339.19\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2e1a8637-1a7f-4b70-a5e1-9d7aa5d3a7d1\" name=\"Changes\" comment=\"\" />\r\n      <created>1739442990443</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1739442990443</updated>\r\n      <workItem from=\"1739442991496\" duration=\"2099000\" />\r\n      <workItem from=\"1739445443173\" duration=\"1813000\" />\r\n      <workItem from=\"1739447457063\" duration=\"991000\" />\r\n      <workItem from=\"1739448471376\" duration=\"3157000\" />\r\n      <workItem from=\"1739529826251\" duration=\"6211000\" />\r\n      <workItem from=\"1739790578498\" duration=\"10540000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/backend$lstm_forecast.coverage\" NAME=\"lstm_forecast Coverage Results\" MODIFIED=\"1739839073798\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/forecast\" />\r\n    <SUITE FILE_PATH=\"coverage/backend$test.coverage\" NAME=\"test Coverage Results\" MODIFIED=\"1739854137606\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/forecast\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../backend/.idea/workspace.xml b/../backend/.idea/workspace.xml
--- a/../backend/.idea/workspace.xml	(revision 1ab158f4a2a0875eb7cb6ac0a269507765373344)
+++ b/../backend/.idea/workspace.xml	(date 1739943564724)
@@ -7,8 +7,9 @@
     <list default="true" id="2e1a8637-1a7f-4b70-a5e1-9d7aa5d3a7d1" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app.db" beforeDir="false" afterPath="$PROJECT_DIR$/app.db" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/forecast/gru_forecast.py" beforeDir="false" afterPath="$PROJECT_DIR$/forecast/gru_forecast.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../frontend/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../frontend/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../frontend/src/context/AuthContext.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/../frontend/src/context/AuthContext.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../frontend/src/pages/Dashboard.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/../frontend/src/pages/Dashboard.jsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../frontend/src/pages/ForecastPage.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/../frontend/src/pages/ForecastPage.jsx" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -55,7 +56,7 @@
     "Python.lstm_forecast.executor": "Run",
     "Python.test.executor": "Run",
     "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "design",
+    "git-widget-placeholder": "design1",
     "last_opened_file_path": "C:/Users/Rusinov.DS/PycharmProjects/project/Forecast_ML_Project",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
